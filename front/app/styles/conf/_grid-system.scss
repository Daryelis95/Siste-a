/// Makes an element a container
/// @group Grid System
/// @param {size} $container-max-width [none] - max width del contenedor. Ej.: "1024px", "90em" o "100%"
@mixin make-me-container($container-max-width){
  max-width: $container-max-width;
  margin: 0 auto;
  box-sizing: border-box;
}

/// Makes an element a row
/// @group Grid System
/// @param {size} $row-gutter [0] - Si el tamano es el mismo que la separacion entre columnas la primer columna coincidira con el borde del contenedor, si es "0" las columnas se separaran del borde del contenedor al igual que entre si.
@mixin make-me-row($row-gutter:0){
  margin: 0 (($row-gutter / 2) * - 1);
  &::after{
    content: " "; /* Older browser do not support empty content */
    visibility: hidden;
    display: table;
    height: 0;
    clear: both;
  }
}

/// Common styles for columns
/// @group Grid System
/// @todo hacer algun hack para poner esto en placeholder que pueda ir dentro de un mediaquery
@mixin column-common($column-gutter) {
  float: left;
  box-sizing: border-box;
  padding: 0 ($column-gutter / 2);
  min-height: 1px;
}

/// Makes an element a column
/// @group Grid System
/// @param {Num} $column-count [none] - Column range (N of X)
/// @param {Num} $column-total [none] - Total columns in the grid (X)
/// @param {size} $column-gutter [none] - Total gap between columns. IE: 16px (8px +8px)
@mixin make-me-column($column-count, $column-total, $column-gutter){
  width: (($column-count * 100) / $column-total) * 1%;
  @include column-common($column-gutter);
}

///////// GENERATORS /////////

/// Containers Generator
/// @group Grid System
/// @param {string} $container-prefix [none] - Container prefix (first part of the selector)
/// @param {string} $container-name[none] - Container name  (mid part of the selector)
/// @param {map} $container-sizes-map [none] - Map of last part of the selector and container widths IE.: ('-xxl': 1344px, '-sm': 768px)
@mixin make-containers($container-prefix, $container-name,  $container-sizes-map){
  @each $container-size-name, $container-sizes-width in $container-sizes-map {
    @if $container-size-name != ''{
      .#{$container-prefix}-#{$container-name}-#{$container-size-name} {
        @include make-me-container($container-sizes-width);
      }
    }@else{
      .#{$container-prefix}-#{$container-name} {
        @include make-me-container($container-sizes-width);
      }
    }
  }
}


/// Columns Generator
/// @group Grid System
/// @param {string} $column-name [none] - Name is the first part of selector. IE 'col'
/// @param {Num} $column-total [none] - Total columns in the grid (X)
/// @param {size} $column-gutter [none] - Total gap between columns. IE: 16px (8px +8px)
/// @param {size} $modifier [''] - Selector's sufix. Is useful for responsive grids
@mixin make-columns($column-name,$column-total, $column-gutter, $modifier:''){
  $i: 1;
  [class^=#{$column-name}-]{
    @include column-common($column-gutter);
  }
  @for $i from 1 through $column-total {
    .#{$column-name}-#{$i}#{$modifier} {
      width: (($i * 100) / $column-total) * 1%;
     }
  }
}
/// Responsive columns system Generator
/// @group Grid System
/// @param {string} $column-name [none] - Name is the first part of selector. IE 'col'
/// @param {Num} $column-total [none] - Total columns in the grid (X)
/// @param {size} $column-gutter [none] - Total gap between columns. IE: 16px (8px +8px)
/// @param {map} $modifier [''] - Map of device's sufix and device's breackpoints in px
@mixin make-grid-responsive($column-name, $column-total, $column-gutter, $device-map){
  $i: 1;
  [class^=#{$column-name}-]{
    @include column-common($column-gutter);
  }
  @each $device-name, $device-size in $device-map{
    @media (min-width: ($device-size - 1)){
      @include make-columns($column-name,$column-total, $column-gutter, -#{$device-name});
      @include make-columns-offset($column-name,$column-total, -#{$device-name});
    }
  }
}

/// Offset generator
/// @group Grid System
/// @param {string} $column-name [none] - Name is the first part of selector. IE 'col'
/// @param {Num} $column-total [none] - Total columns in the grid (X)
/// @param {size} $modifier [''] - Selector's sufix. Is useful for responsive grids
@mixin make-columns-offset($column-name,$column-total, $modifier:''){
  $i: 1;
  @for $i from 1 through ($column-total - 1) {
    .#{$column-name}-offset-#{$i}#{$modifier} {
      margin-left: (($i * 100) / $column-total) * 1%;
     }
  }
}
