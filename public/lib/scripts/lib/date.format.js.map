{"version":3,"sources":["lib/date.format.js"],"names":["dateFormat","token","timezone","timezoneClip","pad","val","len","String","length","date","mask","utc","dF","arguments","Object","prototype","toString","call","test","undefined","Date","isNaN","SyntaxError","masks","slice","_","d","D","m","y","H","M","s","L","o","getTimezoneOffset","flags","dd","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","replace","floor","abs","S","$0","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","format"],"mappings":"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","file":"date.format.js","sourcesContent":["/*\r\n * Date Format 1.2.3\r\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\r\n * MIT license\r\n *\r\n * Includes enhancements by Scott Trenda <scott.trenda.net>\r\n * and Kris Kowal <cixar.com/~kris.kowal/>\r\n *\r\n * Accepts a date, a mask, or a date and a mask.\r\n * Returns a formatted version of the given date.\r\n * The date defaults to the current date/time.\r\n * The mask defaults to dateFormat.masks.default.\r\n */\r\n\r\nvar dateFormat = function () {\r\n\tvar\ttoken = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n\t\ttimezoneClip = /[^-+\\dA-Z]/g,\r\n\t\tpad = function (val, len) {\r\n\t\t\tval = String(val);\r\n\t\t\tlen = len || 2;\r\n\t\t\twhile (val.length < len) val = \"0\" + val;\r\n\t\t\treturn val;\r\n\t\t};\r\n\r\n\t// Regexes and supporting functions are cached through closure\r\n\treturn function (date, mask, utc) {\r\n\t\tvar dF = dateFormat;\r\n\r\n\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\r\n\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n\t\t\tmask = date;\r\n\t\t\tdate = undefined;\r\n\t\t}\r\n\r\n\t\t// Passing date through Date applies Date.parse, if necessary\r\n\t\tdate = date ? new Date(date) : new Date;\r\n\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n\t\t// Allow setting the utc argument via the mask\r\n\t\tif (mask.slice(0, 4) == \"UTC:\") {\r\n\t\t\tmask = mask.slice(4);\r\n\t\t\tutc = true;\r\n\t\t}\r\n\r\n\t\tvar\t_ = utc ? \"getUTC\" : \"get\",\r\n\t\t\td = date[_ + \"Date\"](),\r\n\t\t\tD = date[_ + \"Day\"](),\r\n\t\t\tm = date[_ + \"Month\"](),\r\n\t\t\ty = date[_ + \"FullYear\"](),\r\n\t\t\tH = date[_ + \"Hours\"](),\r\n\t\t\tM = date[_ + \"Minutes\"](),\r\n\t\t\ts = date[_ + \"Seconds\"](),\r\n\t\t\tL = date[_ + \"Milliseconds\"](),\r\n\t\t\to = utc ? 0 : date.getTimezoneOffset(),\r\n\t\t\tflags = {\r\n\t\t\t\td:    d,\r\n\t\t\t\tdd:   pad(d),\r\n\t\t\t\tddd:  dF.i18n.dayNames[D],\r\n\t\t\t\tdddd: dF.i18n.dayNames[D + 7],\r\n\t\t\t\tm:    m + 1,\r\n\t\t\t\tmm:   pad(m + 1),\r\n\t\t\t\tmmm:  dF.i18n.monthNames[m],\r\n\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],\r\n\t\t\t\tyy:   String(y).slice(2),\r\n\t\t\t\tyyyy: y,\r\n\t\t\t\th:    H % 12 || 12,\r\n\t\t\t\thh:   pad(H % 12 || 12),\r\n\t\t\t\tH:    H,\r\n\t\t\t\tHH:   pad(H),\r\n\t\t\t\tM:    M,\r\n\t\t\t\tMM:   pad(M),\r\n\t\t\t\ts:    s,\r\n\t\t\t\tss:   pad(s),\r\n\t\t\t\tl:    pad(L, 3),\r\n\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),\r\n\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",\r\n\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",\r\n\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",\r\n\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",\r\n\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n\t\t\t};\r\n\r\n\t\treturn mask.replace(token, function ($0) {\r\n\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n\t\t});\r\n\t};\r\n}();\r\n\r\n// Some common format strings\r\ndateFormat.masks = {\r\n\t\"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\r\n\tshortDate:      \"m/d/yy\",\r\n\tmediumDate:     \"mmm d, yyyy\",\r\n\tlongDate:       \"mmmm d, yyyy\",\r\n\tfullDate:       \"dddd, mmmm d, yyyy\",\r\n\tshortTime:      \"h:MM TT\",\r\n\tmediumTime:     \"h:MM:ss TT\",\r\n\tlongTime:       \"h:MM:ss TT Z\",\r\n\tisoDate:        \"yyyy-mm-dd\",\r\n\tisoTime:        \"HH:MM:ss\",\r\n\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\r\n\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n};\r\n\r\n// Internationalization strings\r\ndateFormat.i18n = {\r\n\tdayNames: [\r\n\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n\t],\r\n\tmonthNames: [\r\n\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n\t]\r\n};\r\n\r\n// For convenience...\r\nDate.prototype.format = function (mask, utc) {\r\n\treturn dateFormat(this, mask, utc);\r\n};\r\n\r\n"]}