{"version":3,"sources":["lib/angular-animate.js"],"names":["window","angular","ELEMENT_NODE","COMMENT_NODE","ADD_CLASS_SUFFIX","REMOVE_CLASS_SUFFIX","EVENT_CLASS_PREFIX","ACTIVE_CLASS_SUFFIX","PREPARE_CLASS_SUFFIX","NG_ANIMATE_CLASSNAME","NG_ANIMATE_CHILDREN_DATA","CSS_PREFIX","TRANSITION_PROP","TRANSITIONEND_EVENT","ANIMATION_PROP","ANIMATIONEND_EVENT","ontransitionend","undefined","onwebkittransitionend","onanimationend","onwebkitanimationend","DURATION_KEY","PROPERTY_KEY","DELAY_KEY","TIMING_KEY","ANIMATION_ITERATION_COUNT_KEY","ANIMATION_PLAYSTATE_KEY","SAFE_FAST_FORWARD_DURATION_VALUE","ANIMATION_DELAY_PROP","ANIMATION_DURATION_PROP","TRANSITION_DELAY_PROP","TRANSITION_DURATION_PROP","ngMinErr","$$minErr","assertArg","arg","name","reason","mergeClasses","a","b","isArray","join","packageStyles","options","styles","to","from","pendClasses","classes","fix","isPrefix","className","isString","length","split","forEach","klass","i","removeFromArray","arr","val","index","indexOf","splice","stripCommentsFromElement","element","jqLite","nodeType","extractElementNode","elm","$$addClass","$$jqLite","addClass","$$removeClass","removeClass","applyAnimationClassesFactory","prepareAnimationOptions","$$prepared","domOperation","noop","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","css","mergeAnimationDetails","oldAnimation","newAnimation","target","newOptions","toAdd","toRemove","resolveElementClasses","attr","preparationClasses","concatWithSpace","realDomOperation","extend","existing","ADD_CLASS","REMOVE_CLASS","flags","splitClassesToLookup","value","key","prop","allow","obj","getDomNode","applyGeneratedPreparationClasses","event","clearGeneratedClasses","activeClasses","blockTransitions","node","duration","applyInlineStyle","blockKeyframeAnimations","applyBlock","styleTuple","style","$$rAFSchedulerFactory","$$rAF","queue","cancelFn","scheduler","tasks","concat","nextTick","waitUntilQuiet","fn","items","shift","$$AnimateChildrenDirective","$interpolate","link","scope","attrs","ngAnimateChildren","data","setData","$observe","ANIMATE_TIMER_KEY","ONE_SECOND","ELAPSED_TIME_MAX_DECIMAL_PLACES","CLOSING_TIME_BUFFER","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","animationDuration","animationDelay","animationIterationCount","DETECT_STAGGER_CSS_PROPERTIES","getCssKeyframeDurationStyle","getCssDelayStyle","delay","isKeyframeAnimation","computeCssStyles","$window","properties","Object","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","c","charAt","parseMaxTime","str","maxValue","values","substring","parseFloat","Math","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","createLocalCacheLookup","cache","flush","count","entry","total","get","put","registerRestorableStyles","backup","isDefined","getPropertyValue","$AnimateCssProvider","$animateProvider","gcsLookup","gcsStaggerLookup","$get","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue","applyAnimationClasses","parentCounter","gcsHashFn","extraClasses","KEY","parentNode","parentID","getAttribute","computeCachedCssStyles","cacheKey","timings","computeCachedCssStaggerStyles","stagger","staggerClassName","rafWaitQueue","callback","push","pageWidth","computeTimings","aD","tD","maxDelay","maxDuration","init","initialOptions","copy","restoreStyles","enabled","closeAndReturnNoopAnimator","temporaryStyles","animationClosed","animationPaused","animationCompleted","runner","runnerHost","maxDelayTime","maxDurationTime","startTime","events","animations","transitions","method","isStructural","structural","structuralClassName","addRemoveClassName","applyClassesEarly","trim","fullClassName","hasToStyles","keys","containsKeyframeAnimation","keyframeStyle","staggerVal","$$skipPreparationClasses","transitionStyle","durationStyle","itemIndex","staggerIndex","isFirst","skipBlocking","relativeDelay","hasTransitions","hasAnimations","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","applyAnimationDelay","recalculateTimingStyles","delayStyle","blockTransition","blockKeyframeAnimation","cleanupStyles","applyBlocking","$$willAnimate","end","endFn","start","cancel","resume","pause","close","rejected","setProperty","removeProperty","onDone","off","onAnimationProgress","animationTimerData","timer","removeData","complete","stopPropagation","ev","originalEvent","timeStamp","$manualTimeStamp","Date","now","elapsedTime","toFixed","playPause","playAnimation","maxStagger","triggerAnimationStart","floor","easing","easeProp","easeVal","timerTime","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","onAnimationExpired","on","$$AnimateCssDriverProvider","$$animationProvider","drivers","NG_ANIMATE_SHIM_CLASS_NAME","NG_ANIMATE_ANCHOR_CLASS_NAME","NG_OUT_ANCHOR_CLASS_NAME","NG_IN_ANCHOR_CLASS_NAME","isDocumentFragment","$animateCss","$rootScope","$rootElement","$document","bodyNode","body","rootNode","rootBodyElement","contains","initDriverFn","animationDetails","prepareFromToAnchorAnimation","anchors","prepareRegularAnimation","filterCssClasses","replace","getUniqueValues","filter","prepareAnchoredAnimation","outAnchor","inAnchor","clone","cloneNode","startingClasses","getClassVal","append","animatorIn","animatorOut","prepareOutAnimation","prepareInAnimation","startingAnimator","currentAnimation","done","calculateAnchorStyles","anchor","coords","getBoundingClientRect","scrollTop","scrollLeft","animator","endingClasses","remove","fromAnimation","toAnimation","anchorAnimations","outElement","inElement","animationRunners","animation","all","status","$$AnimateJsProvider","$injector","arguments","isObject","classesToAdd","classesToRemove","lookupAnimations","before","after","afterFn","beforeFn","toUpperCase","substr","packageAnimations","applyOptions","closeActiveAnimations","chain","setHost","endAnimations","onComplete","success","cancelled","executeAnimationFn","args","apply","isFunction","groupEventedAnimations","fnName","operations","ani","endProgressCb","resolved","onAnimationComplete","result","startAnimation","runners","animateFn","reject","matches","flagMap","animationFactory","$$registeredAnimations","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory","NG_ANIMATE_ATTR_NAME","NG_ANIMATE_PIN_DATA","$$AnimateQueueProvider","PRE_DIGEST_STATE","RUNNING_STATE","ONE_SPACE","rules","skip","makeTruthyCssClassMap","classString","map","hasMatchingClasses","newClassString","currentClassString","currentClassMap","some","isAllowed","ruleType","previousAnimation","hasAnimationClasses","and","state","nA","nR","cA","cR","isUndefined","$$HashMap","$$animation","$templateRequest","activeAnimationsLookup","disabledElementsLookup","animationsEnabled","postDigestTaskFactory","postDigestCalled","$$postDigest","deregisterWatch","$watch","totalPendingRequests","isEmpty","callbackRegistry","classNameFilter","isAnimatableClassName","test","normalizeAnimationDetails","Node","prototype","compareDocumentPosition","findCallbacks","parent","targetNode","targetParentNode","entries","call","filterFromRegistry","list","matchContainer","matchCallback","containerNode","isMatch","cleanupEventListeners","phase","$animate","container","eventType","pin","parentElement","isElement","queueAnimation","bool","argCount","hasElement","runInNextPostDigestOrNow","documentHidden","hidden","skipAnimations","existingAnimation","hasExistingAnimation","areAnimationsAllowed","notifyProgress","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","joinAnimationFlag","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationCancelled","realRunner","callbacks","progress","children","querySelectorAll","child","parseInt","removeAttribute","isMatchingElement","nodeOrElmA","nodeOrElmB","bodyElement","bodyElementDetected","nodeName","rootElementDetected","parentAnimationDetected","animateChildren","elementDisabled","parentHost","details","parentElementDisabled","allowAnimation","setAttribute","oldValue","newValue","$$AnimationProvider","NG_ANIMATE_REF_ATTR","RUNNER_STORAGE_KEY","setRunner","removeRunner","getRunner","animationQueue","sortAnimations","tree","lookup","domNode","processNode","flatten","processed","elementNode","parentEntry","remainingLevelEntries","nextLevelEntries","row","childEntry","tempClasses","prepareClassName","beforeStart","handleDestroyedElement","groupedAnimations","groupAnimations","toBeSortedAnimations","animationEntry","startAnimationFn","closeFn","targetElement","operation","invokeFirstDriver","animationRunner","updateAnimationRunners","getAnchorNodes","SELECTOR","hasAttribute","preparedAnimations","refLookup","enterOrMove","anchorNodes","direction","animationID","usedIndicesLookup","anchorGroups","indexKey","toString","lookupKey","group","cssClassesIntersection","aa","j","driverName","factory","driver","newRunner","update","ngAnimateSwapDirective","restrict","transclude","terminal","priority","$element","ctrl","$transclude","previousElement","previousScope","$watchCollection","ngAnimateSwap","leave","$destroy","$new","enter","module","initAngularHelpers","directive","provider"],"mappings":"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","file":"angular-animate.js","sourcesContent":["/**\r\n * @license AngularJS v1.5.11\r\n * (c) 2010-2017 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\nvar ELEMENT_NODE = 1;\r\nvar COMMENT_NODE = 8;\r\n\r\nvar ADD_CLASS_SUFFIX = '-add';\r\nvar REMOVE_CLASS_SUFFIX = '-remove';\r\nvar EVENT_CLASS_PREFIX = 'ng-';\r\nvar ACTIVE_CLASS_SUFFIX = '-active';\r\nvar PREPARE_CLASS_SUFFIX = '-prepare';\r\n\r\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\r\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\r\n\r\n// Detect proper transitionend/animationend event names.\r\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\r\n\r\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\r\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\r\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\r\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\r\n// Register both events in case `window.onanimationend` is not supported because of that,\r\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\r\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\r\n// therefore there is no reason to test anymore for other vendor prefixes:\r\n// http://caniuse.com/#search=transition\r\nif ((window.ontransitionend === undefined) && (window.onwebkittransitionend !== undefined)) {\r\n  CSS_PREFIX = '-webkit-';\r\n  TRANSITION_PROP = 'WebkitTransition';\r\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\r\n} else {\r\n  TRANSITION_PROP = 'transition';\r\n  TRANSITIONEND_EVENT = 'transitionend';\r\n}\r\n\r\nif ((window.onanimationend === undefined) && (window.onwebkitanimationend !== undefined)) {\r\n  CSS_PREFIX = '-webkit-';\r\n  ANIMATION_PROP = 'WebkitAnimation';\r\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\r\n} else {\r\n  ANIMATION_PROP = 'animation';\r\n  ANIMATIONEND_EVENT = 'animationend';\r\n}\r\n\r\nvar DURATION_KEY = 'Duration';\r\nvar PROPERTY_KEY = 'Property';\r\nvar DELAY_KEY = 'Delay';\r\nvar TIMING_KEY = 'TimingFunction';\r\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\r\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\r\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\r\n\r\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\r\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\r\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\r\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\r\n\r\nvar ngMinErr = angular.$$minErr('ng');\r\nfunction assertArg(arg, name, reason) {\r\n  if (!arg) {\r\n    throw ngMinErr('areq', 'Argument \\'{0}\\' is {1}', (name || '?'), (reason || 'required'));\r\n  }\r\n  return arg;\r\n}\r\n\r\nfunction mergeClasses(a,b) {\r\n  if (!a && !b) return '';\r\n  if (!a) return b;\r\n  if (!b) return a;\r\n  if (isArray(a)) a = a.join(' ');\r\n  if (isArray(b)) b = b.join(' ');\r\n  return a + ' ' + b;\r\n}\r\n\r\nfunction packageStyles(options) {\r\n  var styles = {};\r\n  if (options && (options.to || options.from)) {\r\n    styles.to = options.to;\r\n    styles.from = options.from;\r\n  }\r\n  return styles;\r\n}\r\n\r\nfunction pendClasses(classes, fix, isPrefix) {\r\n  var className = '';\r\n  classes = isArray(classes)\r\n      ? classes\r\n      : classes && isString(classes) && classes.length\r\n          ? classes.split(/\\s+/)\r\n          : [];\r\n  forEach(classes, function(klass, i) {\r\n    if (klass && klass.length > 0) {\r\n      className += (i > 0) ? ' ' : '';\r\n      className += isPrefix ? fix + klass\r\n                            : klass + fix;\r\n    }\r\n  });\r\n  return className;\r\n}\r\n\r\nfunction removeFromArray(arr, val) {\r\n  var index = arr.indexOf(val);\r\n  if (val >= 0) {\r\n    arr.splice(index, 1);\r\n  }\r\n}\r\n\r\nfunction stripCommentsFromElement(element) {\r\n  if (element instanceof jqLite) {\r\n    switch (element.length) {\r\n      case 0:\r\n        return element;\r\n\r\n      case 1:\r\n        // there is no point of stripping anything if the element\r\n        // is the only element within the jqLite wrapper.\r\n        // (it's important that we retain the element instance.)\r\n        if (element[0].nodeType === ELEMENT_NODE) {\r\n          return element;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        return jqLite(extractElementNode(element));\r\n    }\r\n  }\r\n\r\n  if (element.nodeType === ELEMENT_NODE) {\r\n    return jqLite(element);\r\n  }\r\n}\r\n\r\nfunction extractElementNode(element) {\r\n  if (!element[0]) return element;\r\n  for (var i = 0; i < element.length; i++) {\r\n    var elm = element[i];\r\n    if (elm.nodeType === ELEMENT_NODE) {\r\n      return elm;\r\n    }\r\n  }\r\n}\r\n\r\nfunction $$addClass($$jqLite, element, className) {\r\n  forEach(element, function(elm) {\r\n    $$jqLite.addClass(elm, className);\r\n  });\r\n}\r\n\r\nfunction $$removeClass($$jqLite, element, className) {\r\n  forEach(element, function(elm) {\r\n    $$jqLite.removeClass(elm, className);\r\n  });\r\n}\r\n\r\nfunction applyAnimationClassesFactory($$jqLite) {\r\n  return function(element, options) {\r\n    if (options.addClass) {\r\n      $$addClass($$jqLite, element, options.addClass);\r\n      options.addClass = null;\r\n    }\r\n    if (options.removeClass) {\r\n      $$removeClass($$jqLite, element, options.removeClass);\r\n      options.removeClass = null;\r\n    }\r\n  };\r\n}\r\n\r\nfunction prepareAnimationOptions(options) {\r\n  options = options || {};\r\n  if (!options.$$prepared) {\r\n    var domOperation = options.domOperation || noop;\r\n    options.domOperation = function() {\r\n      options.$$domOperationFired = true;\r\n      domOperation();\r\n      domOperation = noop;\r\n    };\r\n    options.$$prepared = true;\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction applyAnimationStyles(element, options) {\r\n  applyAnimationFromStyles(element, options);\r\n  applyAnimationToStyles(element, options);\r\n}\r\n\r\nfunction applyAnimationFromStyles(element, options) {\r\n  if (options.from) {\r\n    element.css(options.from);\r\n    options.from = null;\r\n  }\r\n}\r\n\r\nfunction applyAnimationToStyles(element, options) {\r\n  if (options.to) {\r\n    element.css(options.to);\r\n    options.to = null;\r\n  }\r\n}\r\n\r\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\r\n  var target = oldAnimation.options || {};\r\n  var newOptions = newAnimation.options || {};\r\n\r\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\r\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\r\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\r\n\r\n  if (newOptions.preparationClasses) {\r\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\r\n    delete newOptions.preparationClasses;\r\n  }\r\n\r\n  // noop is basically when there is no callback; otherwise something has been set\r\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\r\n\r\n  extend(target, newOptions);\r\n\r\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\r\n  if (realDomOperation) {\r\n    target.domOperation = realDomOperation;\r\n  }\r\n\r\n  if (classes.addClass) {\r\n    target.addClass = classes.addClass;\r\n  } else {\r\n    target.addClass = null;\r\n  }\r\n\r\n  if (classes.removeClass) {\r\n    target.removeClass = classes.removeClass;\r\n  } else {\r\n    target.removeClass = null;\r\n  }\r\n\r\n  oldAnimation.addClass = target.addClass;\r\n  oldAnimation.removeClass = target.removeClass;\r\n\r\n  return target;\r\n}\r\n\r\nfunction resolveElementClasses(existing, toAdd, toRemove) {\r\n  var ADD_CLASS = 1;\r\n  var REMOVE_CLASS = -1;\r\n\r\n  var flags = {};\r\n  existing = splitClassesToLookup(existing);\r\n\r\n  toAdd = splitClassesToLookup(toAdd);\r\n  forEach(toAdd, function(value, key) {\r\n    flags[key] = ADD_CLASS;\r\n  });\r\n\r\n  toRemove = splitClassesToLookup(toRemove);\r\n  forEach(toRemove, function(value, key) {\r\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\r\n  });\r\n\r\n  var classes = {\r\n    addClass: '',\r\n    removeClass: ''\r\n  };\r\n\r\n  forEach(flags, function(val, klass) {\r\n    var prop, allow;\r\n    if (val === ADD_CLASS) {\r\n      prop = 'addClass';\r\n      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];\r\n    } else if (val === REMOVE_CLASS) {\r\n      prop = 'removeClass';\r\n      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];\r\n    }\r\n    if (allow) {\r\n      if (classes[prop].length) {\r\n        classes[prop] += ' ';\r\n      }\r\n      classes[prop] += klass;\r\n    }\r\n  });\r\n\r\n  function splitClassesToLookup(classes) {\r\n    if (isString(classes)) {\r\n      classes = classes.split(' ');\r\n    }\r\n\r\n    var obj = {};\r\n    forEach(classes, function(klass) {\r\n      // sometimes the split leaves empty string values\r\n      // incase extra spaces were applied to the options\r\n      if (klass.length) {\r\n        obj[klass] = true;\r\n      }\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  return classes;\r\n}\r\n\r\nfunction getDomNode(element) {\r\n  return (element instanceof jqLite) ? element[0] : element;\r\n}\r\n\r\nfunction applyGeneratedPreparationClasses(element, event, options) {\r\n  var classes = '';\r\n  if (event) {\r\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\r\n  }\r\n  if (options.addClass) {\r\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\r\n  }\r\n  if (options.removeClass) {\r\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\r\n  }\r\n  if (classes.length) {\r\n    options.preparationClasses = classes;\r\n    element.addClass(classes);\r\n  }\r\n}\r\n\r\nfunction clearGeneratedClasses(element, options) {\r\n  if (options.preparationClasses) {\r\n    element.removeClass(options.preparationClasses);\r\n    options.preparationClasses = null;\r\n  }\r\n  if (options.activeClasses) {\r\n    element.removeClass(options.activeClasses);\r\n    options.activeClasses = null;\r\n  }\r\n}\r\n\r\nfunction blockTransitions(node, duration) {\r\n  // we use a negative delay value since it performs blocking\r\n  // yet it doesn't kill any existing transitions running on the\r\n  // same element which makes this safe for class-based animations\r\n  var value = duration ? '-' + duration + 's' : '';\r\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\r\n  return [TRANSITION_DELAY_PROP, value];\r\n}\r\n\r\nfunction blockKeyframeAnimations(node, applyBlock) {\r\n  var value = applyBlock ? 'paused' : '';\r\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\r\n  applyInlineStyle(node, [key, value]);\r\n  return [key, value];\r\n}\r\n\r\nfunction applyInlineStyle(node, styleTuple) {\r\n  var prop = styleTuple[0];\r\n  var value = styleTuple[1];\r\n  node.style[prop] = value;\r\n}\r\n\r\nfunction concatWithSpace(a,b) {\r\n  if (!a) return b;\r\n  if (!b) return a;\r\n  return a + ' ' + b;\r\n}\r\n\r\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\r\n  var queue, cancelFn;\r\n\r\n  function scheduler(tasks) {\r\n    // we make a copy since RAFScheduler mutates the state\r\n    // of the passed in array variable and this would be difficult\r\n    // to track down on the outside code\r\n    queue = queue.concat(tasks);\r\n    nextTick();\r\n  }\r\n\r\n  queue = scheduler.queue = [];\r\n\r\n  /* waitUntilQuiet does two things:\r\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\r\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\r\n   *\r\n   * The motivation here is that animation code can request more time from the scheduler\r\n   * before the next wave runs. This allows for certain DOM properties such as classes to\r\n   * be resolved in time for the next animation to run.\r\n   */\r\n  scheduler.waitUntilQuiet = function(fn) {\r\n    if (cancelFn) cancelFn();\r\n\r\n    cancelFn = $$rAF(function() {\r\n      cancelFn = null;\r\n      fn();\r\n      nextTick();\r\n    });\r\n  };\r\n\r\n  return scheduler;\r\n\r\n  function nextTick() {\r\n    if (!queue.length) return;\r\n\r\n    var items = queue.shift();\r\n    for (var i = 0; i < items.length; i++) {\r\n      items[i]();\r\n    }\r\n\r\n    if (!cancelFn) {\r\n      $$rAF(function() {\r\n        if (!cancelFn) nextTick();\r\n      });\r\n    }\r\n  }\r\n}];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngAnimateChildren\r\n * @restrict AE\r\n * @element ANY\r\n *\r\n * @description\r\n *\r\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\r\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\r\n * (structural) animation, child elements that also have an active structural animation are not animated.\r\n *\r\n * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\r\n *\r\n *\r\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\r\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\r\n *\r\n * @example\r\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\r\n     <file name=\"index.html\">\r\n       <div ng-controller=\"MainController as main\">\r\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\r\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\r\n         <hr>\r\n         <div ng-animate-children=\"{{main.animateChildren}}\">\r\n           <div ng-if=\"main.enterElement\" class=\"container\">\r\n             List of items:\r\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     </file>\r\n     <file name=\"animations.css\">\r\n\r\n      .container.ng-enter,\r\n      .container.ng-leave {\r\n        transition: all ease 1.5s;\r\n      }\r\n\r\n      .container.ng-enter,\r\n      .container.ng-leave-active {\r\n        opacity: 0;\r\n      }\r\n\r\n      .container.ng-leave,\r\n      .container.ng-enter-active {\r\n        opacity: 1;\r\n      }\r\n\r\n      .item {\r\n        background: firebrick;\r\n        color: #FFF;\r\n        margin-bottom: 10px;\r\n      }\r\n\r\n      .item.ng-enter,\r\n      .item.ng-leave {\r\n        transition: transform 1.5s ease;\r\n      }\r\n\r\n      .item.ng-enter {\r\n        transform: translateX(50px);\r\n      }\r\n\r\n      .item.ng-enter-active {\r\n        transform: translateX(0);\r\n      }\r\n    </file>\r\n    <file name=\"script.js\">\r\n      angular.module('ngAnimateChildren', ['ngAnimate'])\r\n        .controller('MainController', function MainController() {\r\n          this.animateChildren = false;\r\n          this.enterElement = false;\r\n        });\r\n    </file>\r\n  </example>\r\n */\r\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\r\n  return {\r\n    link: function(scope, element, attrs) {\r\n      var val = attrs.ngAnimateChildren;\r\n      if (isString(val) && val.length === 0) { //empty attribute\r\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\r\n      } else {\r\n        // Interpolate and set the value, so that it is available to\r\n        // animations that run right after compilation\r\n        setData($interpolate(val)(scope));\r\n        attrs.$observe('ngAnimateChildren', setData);\r\n      }\r\n\r\n      function setData(value) {\r\n        value = value === 'on' || value === 'true';\r\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\r\n      }\r\n    }\r\n  };\r\n}];\r\n\r\n/* exported $AnimateCssProvider */\r\n\r\nvar ANIMATE_TIMER_KEY = '$$animateCss';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $animateCss\r\n * @kind object\r\n *\r\n * @description\r\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\r\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\r\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\r\n * directives to create more complex animations that can be purely driven using CSS code.\r\n *\r\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\r\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\r\n *\r\n * ## Usage\r\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\r\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\r\n * any automatic control over cancelling animations and/or preventing animations from being run on\r\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\r\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\r\n * the CSS animation.\r\n *\r\n * The example below shows how we can create a folding animation on an element using `ng-if`:\r\n *\r\n * ```html\r\n * <!-- notice the `fold-animation` CSS class -->\r\n * <div ng-if=\"onOff\" class=\"fold-animation\">\r\n *   This element will go BOOM\r\n * </div>\r\n * <button ng-click=\"onOff=true\">Fold In</button>\r\n * ```\r\n *\r\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\r\n *\r\n * ```js\r\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       var height = element[0].offsetHeight;\r\n *       return $animateCss(element, {\r\n *         from: { height:'0px' },\r\n *         to: { height:height + 'px' },\r\n *         duration: 1 // one second\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ## More Advanced Uses\r\n *\r\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\r\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\r\n *\r\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\r\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\r\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\r\n * to provide a working animation that will run in CSS.\r\n *\r\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\r\n *\r\n * ```js\r\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       var height = element[0].offsetHeight;\r\n *       return $animateCss(element, {\r\n *         addClass: 'red large-text pulse-twice',\r\n *         easing: 'ease-out',\r\n *         from: { height:'0px' },\r\n *         to: { height:height + 'px' },\r\n *         duration: 1 // one second\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\r\n *\r\n * ```css\r\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\r\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\r\n * .red { background:red; }\r\n * .large-text { font-size:20px; }\r\n *\r\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\r\n * .pulse-twice {\r\n *   animation: 0.5s pulse linear 2;\r\n *   -webkit-animation: 0.5s pulse linear 2;\r\n * }\r\n *\r\n * @keyframes pulse {\r\n *   from { transform: scale(0.5); }\r\n *   to { transform: scale(1.5); }\r\n * }\r\n *\r\n * @-webkit-keyframes pulse {\r\n *   from { -webkit-transform: scale(0.5); }\r\n *   to { -webkit-transform: scale(1.5); }\r\n * }\r\n * ```\r\n *\r\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\r\n *\r\n * ## How the Options are handled\r\n *\r\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\r\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\r\n * styles using the `from` and `to` properties.\r\n *\r\n * ```js\r\n * var animator = $animateCss(element, {\r\n *   from: { background:'red' },\r\n *   to: { background:'blue' }\r\n * });\r\n * animator.start();\r\n * ```\r\n *\r\n * ```css\r\n * .rotating-animation {\r\n *   animation:0.5s rotate linear;\r\n *   -webkit-animation:0.5s rotate linear;\r\n * }\r\n *\r\n * @keyframes rotate {\r\n *   from { transform: rotate(0deg); }\r\n *   to { transform: rotate(360deg); }\r\n * }\r\n *\r\n * @-webkit-keyframes rotate {\r\n *   from { -webkit-transform: rotate(0deg); }\r\n *   to { -webkit-transform: rotate(360deg); }\r\n * }\r\n * ```\r\n *\r\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\r\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\r\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\r\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\r\n * and spread across the transition and keyframe animation.\r\n *\r\n * ## What is returned\r\n *\r\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\r\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\r\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\r\n *\r\n * ```js\r\n * var animator = $animateCss(element, { ... });\r\n * ```\r\n *\r\n * Now what do the contents of our `animator` variable look like:\r\n *\r\n * ```js\r\n * {\r\n *   // starts the animation\r\n *   start: Function,\r\n *\r\n *   // ends (aborts) the animation\r\n *   end: Function\r\n * }\r\n * ```\r\n *\r\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\r\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\r\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\r\n * and that changing them will not reconfigure the parameters of the animation.\r\n *\r\n * ### runner.done() vs runner.then()\r\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\r\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\r\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\r\n * unless you really need a digest to kick off afterwards.\r\n *\r\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\r\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\r\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\r\n *\r\n * @param {DOMElement} element the element that will be animated\r\n * @param {object} options the animation-related options that will be applied during the animation\r\n *\r\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\r\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\r\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\r\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\r\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\r\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\r\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\r\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\r\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\r\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\r\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\r\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\r\n * is provided then the animation will be skipped entirely.\r\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\r\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\r\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\r\n * CSS delay value.\r\n * * `stagger` - A numeric time value representing the delay between successively animated elements\r\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\r\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\r\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\r\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\r\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\r\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\r\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\r\n *    By default this value is set to `false`.\r\n *\r\n * @return {object} an object with start and end methods and details about the animation.\r\n *\r\n * * `start` - The method to start the animation. This will return a `Promise` when called.\r\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\r\n */\r\nvar ONE_SECOND = 1000;\r\n\r\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\r\nvar CLOSING_TIME_BUFFER = 1.5;\r\n\r\nvar DETECT_CSS_PROPERTIES = {\r\n  transitionDuration:      TRANSITION_DURATION_PROP,\r\n  transitionDelay:         TRANSITION_DELAY_PROP,\r\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\r\n  animationDuration:       ANIMATION_DURATION_PROP,\r\n  animationDelay:          ANIMATION_DELAY_PROP,\r\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\r\n};\r\n\r\nvar DETECT_STAGGER_CSS_PROPERTIES = {\r\n  transitionDuration:      TRANSITION_DURATION_PROP,\r\n  transitionDelay:         TRANSITION_DELAY_PROP,\r\n  animationDuration:       ANIMATION_DURATION_PROP,\r\n  animationDelay:          ANIMATION_DELAY_PROP\r\n};\r\n\r\nfunction getCssKeyframeDurationStyle(duration) {\r\n  return [ANIMATION_DURATION_PROP, duration + 's'];\r\n}\r\n\r\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\r\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\r\n  return [prop, delay + 's'];\r\n}\r\n\r\nfunction computeCssStyles($window, element, properties) {\r\n  var styles = Object.create(null);\r\n  var detectedStyles = $window.getComputedStyle(element) || {};\r\n  forEach(properties, function(formalStyleName, actualStyleName) {\r\n    var val = detectedStyles[formalStyleName];\r\n    if (val) {\r\n      var c = val.charAt(0);\r\n\r\n      // only numerical-based values have a negative sign or digit as the first value\r\n      if (c === '-' || c === '+' || c >= 0) {\r\n        val = parseMaxTime(val);\r\n      }\r\n\r\n      // by setting this to null in the event that the delay is not set or is set directly as 0\r\n      // then we can still allow for negative values to be used later on and not mistake this\r\n      // value for being greater than any other negative value.\r\n      if (val === 0) {\r\n        val = null;\r\n      }\r\n      styles[actualStyleName] = val;\r\n    }\r\n  });\r\n\r\n  return styles;\r\n}\r\n\r\nfunction parseMaxTime(str) {\r\n  var maxValue = 0;\r\n  var values = str.split(/\\s*,\\s*/);\r\n  forEach(values, function(value) {\r\n    // it's always safe to consider only second values and omit `ms` values since\r\n    // getComputedStyle will always handle the conversion for us\r\n    if (value.charAt(value.length - 1) === 's') {\r\n      value = value.substring(0, value.length - 1);\r\n    }\r\n    value = parseFloat(value) || 0;\r\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\r\n  });\r\n  return maxValue;\r\n}\r\n\r\nfunction truthyTimingValue(val) {\r\n  return val === 0 || val != null;\r\n}\r\n\r\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\r\n  var style = TRANSITION_PROP;\r\n  var value = duration + 's';\r\n  if (applyOnlyDuration) {\r\n    style += DURATION_KEY;\r\n  } else {\r\n    value += ' linear all';\r\n  }\r\n  return [style, value];\r\n}\r\n\r\nfunction createLocalCacheLookup() {\r\n  var cache = Object.create(null);\r\n  return {\r\n    flush: function() {\r\n      cache = Object.create(null);\r\n    },\r\n\r\n    count: function(key) {\r\n      var entry = cache[key];\r\n      return entry ? entry.total : 0;\r\n    },\r\n\r\n    get: function(key) {\r\n      var entry = cache[key];\r\n      return entry && entry.value;\r\n    },\r\n\r\n    put: function(key, value) {\r\n      if (!cache[key]) {\r\n        cache[key] = { total: 1, value: value };\r\n      } else {\r\n        cache[key].total++;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// we do not reassign an already present style value since\r\n// if we detect the style property value again we may be\r\n// detecting styles that were added via the `from` styles.\r\n// We make use of `isDefined` here since an empty string\r\n// or null value (which is what getPropertyValue will return\r\n// for a non-existing style) will still be marked as a valid\r\n// value for the style (a falsy value implies that the style\r\n// is to be removed at the end of the animation). If we had a simple\r\n// \"OR\" statement then it would not be enough to catch that.\r\nfunction registerRestorableStyles(backup, node, properties) {\r\n  forEach(properties, function(prop) {\r\n    backup[prop] = isDefined(backup[prop])\r\n        ? backup[prop]\r\n        : node.style.getPropertyValue(prop);\r\n  });\r\n}\r\n\r\nvar $AnimateCssProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var gcsLookup = createLocalCacheLookup();\r\n  var gcsStaggerLookup = createLocalCacheLookup();\r\n\r\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\r\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\r\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\r\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    var parentCounter = 0;\r\n    function gcsHashFn(node, extraClasses) {\r\n      var KEY = '$$ngAnimateParentKey';\r\n      var parentNode = node.parentNode;\r\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\r\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\r\n    }\r\n\r\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\r\n      var timings = gcsLookup.get(cacheKey);\r\n\r\n      if (!timings) {\r\n        timings = computeCssStyles($window, node, properties);\r\n        if (timings.animationIterationCount === 'infinite') {\r\n          timings.animationIterationCount = 1;\r\n        }\r\n      }\r\n\r\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\r\n      // because we're keeping an internal tally of how many duplicate animations are detected.\r\n      gcsLookup.put(cacheKey, timings);\r\n      return timings;\r\n    }\r\n\r\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\r\n      var stagger;\r\n\r\n      // if we have one or more existing matches of matching elements\r\n      // containing the same parent + CSS styles (which is how cacheKey works)\r\n      // then staggering is possible\r\n      if (gcsLookup.count(cacheKey) > 0) {\r\n        stagger = gcsStaggerLookup.get(cacheKey);\r\n\r\n        if (!stagger) {\r\n          var staggerClassName = pendClasses(className, '-stagger');\r\n\r\n          $$jqLite.addClass(node, staggerClassName);\r\n\r\n          stagger = computeCssStyles($window, node, properties);\r\n\r\n          // force the conversion of a null value to zero incase not set\r\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\r\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\r\n\r\n          $$jqLite.removeClass(node, staggerClassName);\r\n\r\n          gcsStaggerLookup.put(cacheKey, stagger);\r\n        }\r\n      }\r\n\r\n      return stagger || {};\r\n    }\r\n\r\n    var rafWaitQueue = [];\r\n    function waitUntilQuiet(callback) {\r\n      rafWaitQueue.push(callback);\r\n      $$rAFScheduler.waitUntilQuiet(function() {\r\n        gcsLookup.flush();\r\n        gcsStaggerLookup.flush();\r\n\r\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\r\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\r\n        var pageWidth = $$forceReflow();\r\n\r\n        // we use a for loop to ensure that if the queue is changed\r\n        // during this looping then it will consider new requests\r\n        for (var i = 0; i < rafWaitQueue.length; i++) {\r\n          rafWaitQueue[i](pageWidth);\r\n        }\r\n        rafWaitQueue.length = 0;\r\n      });\r\n    }\r\n\r\n    function computeTimings(node, className, cacheKey) {\r\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\r\n      var aD = timings.animationDelay;\r\n      var tD = timings.transitionDelay;\r\n      timings.maxDelay = aD && tD\r\n          ? Math.max(aD, tD)\r\n          : (aD || tD);\r\n      timings.maxDuration = Math.max(\r\n          timings.animationDuration * timings.animationIterationCount,\r\n          timings.transitionDuration);\r\n\r\n      return timings;\r\n    }\r\n\r\n    return function init(element, initialOptions) {\r\n      // all of the animation functions should create\r\n      // a copy of the options data, however, if a\r\n      // parent service has already created a copy then\r\n      // we should stick to using that\r\n      var options = initialOptions || {};\r\n      if (!options.$$prepared) {\r\n        options = prepareAnimationOptions(copy(options));\r\n      }\r\n\r\n      var restoreStyles = {};\r\n      var node = getDomNode(element);\r\n      if (!node\r\n          || !node.parentNode\r\n          || !$$animateQueue.enabled()) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var temporaryStyles = [];\r\n      var classes = element.attr('class');\r\n      var styles = packageStyles(options);\r\n      var animationClosed;\r\n      var animationPaused;\r\n      var animationCompleted;\r\n      var runner;\r\n      var runnerHost;\r\n      var maxDelay;\r\n      var maxDelayTime;\r\n      var maxDuration;\r\n      var maxDurationTime;\r\n      var startTime;\r\n      var events = [];\r\n\r\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var method = options.event && isArray(options.event)\r\n            ? options.event.join(' ')\r\n            : options.event;\r\n\r\n      var isStructural = method && options.structural;\r\n      var structuralClassName = '';\r\n      var addRemoveClassName = '';\r\n\r\n      if (isStructural) {\r\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\r\n      } else if (method) {\r\n        structuralClassName = method;\r\n      }\r\n\r\n      if (options.addClass) {\r\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\r\n      }\r\n\r\n      if (options.removeClass) {\r\n        if (addRemoveClassName.length) {\r\n          addRemoveClassName += ' ';\r\n        }\r\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\r\n      }\r\n\r\n      // there may be a situation where a structural animation is combined together\r\n      // with CSS classes that need to resolve before the animation is computed.\r\n      // However this means that there is no explicit CSS code to block the animation\r\n      // from happening (by setting 0s none in the class name). If this is the case\r\n      // we need to apply the classes before the first rAF so we know to continue if\r\n      // there actually is a detected transition or keyframe animation\r\n      if (options.applyClassesEarly && addRemoveClassName.length) {\r\n        applyAnimationClasses(element, options);\r\n      }\r\n\r\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\r\n      var fullClassName = classes + ' ' + preparationClasses;\r\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\r\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\r\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\r\n\r\n      // there is no way we can trigger an animation if no styles and\r\n      // no classes are being applied which would then trigger a transition,\r\n      // unless there a is raw keyframe value that is applied to the element.\r\n      if (!containsKeyframeAnimation\r\n           && !hasToStyles\r\n           && !preparationClasses) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var cacheKey, stagger;\r\n      if (options.stagger > 0) {\r\n        var staggerVal = parseFloat(options.stagger);\r\n        stagger = {\r\n          transitionDelay: staggerVal,\r\n          animationDelay: staggerVal,\r\n          transitionDuration: 0,\r\n          animationDuration: 0\r\n        };\r\n      } else {\r\n        cacheKey = gcsHashFn(node, fullClassName);\r\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\r\n      }\r\n\r\n      if (!options.$$skipPreparationClasses) {\r\n        $$jqLite.addClass(element, preparationClasses);\r\n      }\r\n\r\n      var applyOnlyDuration;\r\n\r\n      if (options.transitionStyle) {\r\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\r\n        applyInlineStyle(node, transitionStyle);\r\n        temporaryStyles.push(transitionStyle);\r\n      }\r\n\r\n      if (options.duration >= 0) {\r\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\r\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\r\n\r\n        // we set the duration so that it will be picked up by getComputedStyle later\r\n        applyInlineStyle(node, durationStyle);\r\n        temporaryStyles.push(durationStyle);\r\n      }\r\n\r\n      if (options.keyframeStyle) {\r\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\r\n        applyInlineStyle(node, keyframeStyle);\r\n        temporaryStyles.push(keyframeStyle);\r\n      }\r\n\r\n      var itemIndex = stagger\r\n          ? options.staggerIndex >= 0\r\n              ? options.staggerIndex\r\n              : gcsLookup.count(cacheKey)\r\n          : 0;\r\n\r\n      var isFirst = itemIndex === 0;\r\n\r\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\r\n      // without causing any combination of transitions to kick in. By adding a negative delay value\r\n      // it forces the setup class' transition to end immediately. We later then remove the negative\r\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\r\n      // that if there is no transition defined then nothing will happen and this will also allow\r\n      // other transitions to be stacked on top of each other without any chopping them out.\r\n      if (isFirst && !options.skipBlocking) {\r\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\r\n      }\r\n\r\n      var timings = computeTimings(node, fullClassName, cacheKey);\r\n      var relativeDelay = timings.maxDelay;\r\n      maxDelay = Math.max(relativeDelay, 0);\r\n      maxDuration = timings.maxDuration;\r\n\r\n      var flags = {};\r\n      flags.hasTransitions          = timings.transitionDuration > 0;\r\n      flags.hasAnimations           = timings.animationDuration > 0;\r\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty === 'all';\r\n      flags.applyTransitionDuration = hasToStyles && (\r\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\r\n                                         || (flags.hasAnimations && !flags.hasTransitions));\r\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\r\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\r\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\r\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\r\n\r\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\r\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\r\n\r\n        if (flags.applyTransitionDuration) {\r\n          flags.hasTransitions = true;\r\n          timings.transitionDuration = maxDuration;\r\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\r\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\r\n        }\r\n\r\n        if (flags.applyAnimationDuration) {\r\n          flags.hasAnimations = true;\r\n          timings.animationDuration = maxDuration;\r\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\r\n        }\r\n      }\r\n\r\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      if (options.delay != null) {\r\n        var delayStyle;\r\n        if (typeof options.delay !== 'boolean') {\r\n          delayStyle = parseFloat(options.delay);\r\n          // number in options.delay means we have to recalculate the delay for the closing timeout\r\n          maxDelay = Math.max(delayStyle, 0);\r\n        }\r\n\r\n        if (flags.applyTransitionDelay) {\r\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\r\n        }\r\n\r\n        if (flags.applyAnimationDelay) {\r\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\r\n        }\r\n      }\r\n\r\n      // we need to recalculate the delay value since we used a pre-emptive negative\r\n      // delay value and the delay value is required for the final event checking. This\r\n      // property will ensure that this will happen after the RAF phase has passed.\r\n      if (options.duration == null && timings.transitionDuration > 0) {\r\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\r\n      }\r\n\r\n      maxDelayTime = maxDelay * ONE_SECOND;\r\n      maxDurationTime = maxDuration * ONE_SECOND;\r\n      if (!options.skipBlocking) {\r\n        flags.blockTransition = timings.transitionDuration > 0;\r\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\r\n                                       stagger.animationDelay > 0 &&\r\n                                       stagger.animationDuration === 0;\r\n      }\r\n\r\n      if (options.from) {\r\n        if (options.cleanupStyles) {\r\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\r\n        }\r\n        applyAnimationFromStyles(element, options);\r\n      }\r\n\r\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\r\n        applyBlocking(maxDuration);\r\n      } else if (!options.skipBlocking) {\r\n        blockTransitions(node, false);\r\n      }\r\n\r\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\r\n      return {\r\n        $$willAnimate: true,\r\n        end: endFn,\r\n        start: function() {\r\n          if (animationClosed) return;\r\n\r\n          runnerHost = {\r\n            end: endFn,\r\n            cancel: cancelFn,\r\n            resume: null, //this will be set during the start() phase\r\n            pause: null\r\n          };\r\n\r\n          runner = new $$AnimateRunner(runnerHost);\r\n\r\n          waitUntilQuiet(start);\r\n\r\n          // we don't have access to pause/resume the animation\r\n          // since it hasn't run yet. AnimateRunner will therefore\r\n          // set noop functions for resume and pause and they will\r\n          // later be overridden once the animation is triggered\r\n          return runner;\r\n        }\r\n      };\r\n\r\n      function endFn() {\r\n        close();\r\n      }\r\n\r\n      function cancelFn() {\r\n        close(true);\r\n      }\r\n\r\n      function close(rejected) {\r\n        // if the promise has been called already then we shouldn't close\r\n        // the animation again\r\n        if (animationClosed || (animationCompleted && animationPaused)) return;\r\n        animationClosed = true;\r\n        animationPaused = false;\r\n\r\n        if (!options.$$skipPreparationClasses) {\r\n          $$jqLite.removeClass(element, preparationClasses);\r\n        }\r\n        $$jqLite.removeClass(element, activeClasses);\r\n\r\n        blockKeyframeAnimations(node, false);\r\n        blockTransitions(node, false);\r\n\r\n        forEach(temporaryStyles, function(entry) {\r\n          // There is only one way to remove inline style properties entirely from elements.\r\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\r\n          // styles down to hyphenated values.\r\n          node.style[entry[0]] = '';\r\n        });\r\n\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n\r\n        if (Object.keys(restoreStyles).length) {\r\n          forEach(restoreStyles, function(value, prop) {\r\n            if (value) {\r\n              node.style.setProperty(prop, value);\r\n            } else {\r\n              node.style.removeProperty(prop);\r\n            }\r\n          });\r\n        }\r\n\r\n        // the reason why we have this option is to allow a synchronous closing callback\r\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\r\n        // the animation never takes off at all. A good example is a leave animation since\r\n        // the element must be removed just after the animation is over or else the element\r\n        // will appear on screen for one animation frame causing an overbearing flicker.\r\n        if (options.onDone) {\r\n          options.onDone();\r\n        }\r\n\r\n        if (events && events.length) {\r\n          // Remove the transitionend / animationend listener(s)\r\n          element.off(events.join(' '), onAnimationProgress);\r\n        }\r\n\r\n        //Cancel the fallback closing timeout and remove the timer data\r\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\r\n        if (animationTimerData) {\r\n          $timeout.cancel(animationTimerData[0].timer);\r\n          element.removeData(ANIMATE_TIMER_KEY);\r\n        }\r\n\r\n        // if the preparation function fails then the promise is not setup\r\n        if (runner) {\r\n          runner.complete(!rejected);\r\n        }\r\n      }\r\n\r\n      function applyBlocking(duration) {\r\n        if (flags.blockTransition) {\r\n          blockTransitions(node, duration);\r\n        }\r\n\r\n        if (flags.blockKeyframeAnimation) {\r\n          blockKeyframeAnimations(node, !!duration);\r\n        }\r\n      }\r\n\r\n      function closeAndReturnNoopAnimator() {\r\n        runner = new $$AnimateRunner({\r\n          end: endFn,\r\n          cancel: cancelFn\r\n        });\r\n\r\n        // should flush the cache animation\r\n        waitUntilQuiet(noop);\r\n        close();\r\n\r\n        return {\r\n          $$willAnimate: false,\r\n          start: function() {\r\n            return runner;\r\n          },\r\n          end: endFn\r\n        };\r\n      }\r\n\r\n      function onAnimationProgress(event) {\r\n        event.stopPropagation();\r\n        var ev = event.originalEvent || event;\r\n\r\n        // we now always use `Date.now()` due to the recent changes with\r\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\r\n        var timeStamp = ev.$manualTimeStamp || Date.now();\r\n\r\n        /* Firefox (or possibly just Gecko) likes to not round values up\r\n         * when a ms measurement is used for the animation */\r\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\r\n\r\n        /* $manualTimeStamp is a mocked timeStamp value which is set\r\n         * within browserTrigger(). This is only here so that tests can\r\n         * mock animations properly. Real events fallback to event.timeStamp,\r\n         * or, if they don't, then a timeStamp is automatically created for them.\r\n         * We're checking to see if the timeStamp surpasses the expected delay,\r\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\r\n         * pre-condition since animationPauseds sometimes close off early */\r\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\r\n          // we set this flag to ensure that if the transition is paused then, when resumed,\r\n          // the animation will automatically close itself since transitions cannot be paused.\r\n          animationCompleted = true;\r\n          close();\r\n        }\r\n      }\r\n\r\n      function start() {\r\n        if (animationClosed) return;\r\n        if (!node.parentNode) {\r\n          close();\r\n          return;\r\n        }\r\n\r\n        // even though we only pause keyframe animations here the pause flag\r\n        // will still happen when transitions are used. Only the transition will\r\n        // not be paused since that is not possible. If the animation ends when\r\n        // paused then it will not complete until unpaused or cancelled.\r\n        var playPause = function(playAnimation) {\r\n          if (!animationCompleted) {\r\n            animationPaused = !playAnimation;\r\n            if (timings.animationDuration) {\r\n              var value = blockKeyframeAnimations(node, animationPaused);\r\n              if (animationPaused) {\r\n                temporaryStyles.push(value);\r\n              } else {\r\n                removeFromArray(temporaryStyles, value);\r\n              }\r\n            }\r\n          } else if (animationPaused && playAnimation) {\r\n            animationPaused = false;\r\n            close();\r\n          }\r\n        };\r\n\r\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\r\n        // being inherited from the parent. If the transition duration is zero then we can safely\r\n        // rely that the delay value is an intentional stagger delay style.\r\n        var maxStagger = itemIndex > 0\r\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\r\n                            (timings.animationDuration && stagger.animationDuration === 0))\r\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\r\n        if (maxStagger) {\r\n          $timeout(triggerAnimationStart,\r\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\r\n                   false);\r\n        } else {\r\n          triggerAnimationStart();\r\n        }\r\n\r\n        // this will decorate the existing promise runner with pause/resume methods\r\n        runnerHost.resume = function() {\r\n          playPause(true);\r\n        };\r\n\r\n        runnerHost.pause = function() {\r\n          playPause(false);\r\n        };\r\n\r\n        function triggerAnimationStart() {\r\n          // just incase a stagger animation kicks in when the animation\r\n          // itself was cancelled entirely\r\n          if (animationClosed) return;\r\n\r\n          applyBlocking(false);\r\n\r\n          forEach(temporaryStyles, function(entry) {\r\n            var key = entry[0];\r\n            var value = entry[1];\r\n            node.style[key] = value;\r\n          });\r\n\r\n          applyAnimationClasses(element, options);\r\n          $$jqLite.addClass(element, activeClasses);\r\n\r\n          if (flags.recalculateTimingStyles) {\r\n            fullClassName = node.className + ' ' + preparationClasses;\r\n            cacheKey = gcsHashFn(node, fullClassName);\r\n\r\n            timings = computeTimings(node, fullClassName, cacheKey);\r\n            relativeDelay = timings.maxDelay;\r\n            maxDelay = Math.max(relativeDelay, 0);\r\n            maxDuration = timings.maxDuration;\r\n\r\n            if (maxDuration === 0) {\r\n              close();\r\n              return;\r\n            }\r\n\r\n            flags.hasTransitions = timings.transitionDuration > 0;\r\n            flags.hasAnimations = timings.animationDuration > 0;\r\n          }\r\n\r\n          if (flags.applyAnimationDelay) {\r\n            relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay)\r\n                  ? parseFloat(options.delay)\r\n                  : relativeDelay;\r\n\r\n            maxDelay = Math.max(relativeDelay, 0);\r\n            timings.animationDelay = relativeDelay;\r\n            delayStyle = getCssDelayStyle(relativeDelay, true);\r\n            temporaryStyles.push(delayStyle);\r\n            node.style[delayStyle[0]] = delayStyle[1];\r\n          }\r\n\r\n          maxDelayTime = maxDelay * ONE_SECOND;\r\n          maxDurationTime = maxDuration * ONE_SECOND;\r\n\r\n          if (options.easing) {\r\n            var easeProp, easeVal = options.easing;\r\n            if (flags.hasTransitions) {\r\n              easeProp = TRANSITION_PROP + TIMING_KEY;\r\n              temporaryStyles.push([easeProp, easeVal]);\r\n              node.style[easeProp] = easeVal;\r\n            }\r\n            if (flags.hasAnimations) {\r\n              easeProp = ANIMATION_PROP + TIMING_KEY;\r\n              temporaryStyles.push([easeProp, easeVal]);\r\n              node.style[easeProp] = easeVal;\r\n            }\r\n          }\r\n\r\n          if (timings.transitionDuration) {\r\n            events.push(TRANSITIONEND_EVENT);\r\n          }\r\n\r\n          if (timings.animationDuration) {\r\n            events.push(ANIMATIONEND_EVENT);\r\n          }\r\n\r\n          startTime = Date.now();\r\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\r\n          var endTime = startTime + timerTime;\r\n\r\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\r\n          var setupFallbackTimer = true;\r\n          if (animationsData.length) {\r\n            var currentTimerData = animationsData[0];\r\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\r\n            if (setupFallbackTimer) {\r\n              $timeout.cancel(currentTimerData.timer);\r\n            } else {\r\n              animationsData.push(close);\r\n            }\r\n          }\r\n\r\n          if (setupFallbackTimer) {\r\n            var timer = $timeout(onAnimationExpired, timerTime, false);\r\n            animationsData[0] = {\r\n              timer: timer,\r\n              expectedEndTime: endTime\r\n            };\r\n            animationsData.push(close);\r\n            element.data(ANIMATE_TIMER_KEY, animationsData);\r\n          }\r\n\r\n          if (events.length) {\r\n            element.on(events.join(' '), onAnimationProgress);\r\n          }\r\n\r\n          if (options.to) {\r\n            if (options.cleanupStyles) {\r\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\r\n            }\r\n            applyAnimationToStyles(element, options);\r\n          }\r\n        }\r\n\r\n        function onAnimationExpired() {\r\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\r\n\r\n          // this will be false in the event that the element was\r\n          // removed from the DOM (via a leave animation or something\r\n          // similar)\r\n          if (animationsData) {\r\n            for (var i = 1; i < animationsData.length; i++) {\r\n              animationsData[i]();\r\n            }\r\n            element.removeData(ANIMATE_TIMER_KEY);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }];\r\n}];\r\n\r\nvar $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\r\n  $$animationProvider.drivers.push('$$animateCssDriver');\r\n\r\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\r\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\r\n\r\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\r\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\r\n\r\n  function isDocumentFragment(node) {\r\n    return node.parentNode && node.parentNode.nodeType === 11;\r\n  }\r\n\r\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\r\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\r\n\r\n    // only browsers that support these properties can render animations\r\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\r\n\r\n    var bodyNode = $document[0].body;\r\n    var rootNode = getDomNode($rootElement);\r\n\r\n    var rootBodyElement = jqLite(\r\n      // this is to avoid using something that exists outside of the body\r\n      // we also special case the doc fragment case because our unit test code\r\n      // appends the $rootElement to the body after the app has been bootstrapped\r\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\r\n    );\r\n\r\n    return function initDriverFn(animationDetails) {\r\n      return animationDetails.from && animationDetails.to\r\n          ? prepareFromToAnchorAnimation(animationDetails.from,\r\n                                         animationDetails.to,\r\n                                         animationDetails.classes,\r\n                                         animationDetails.anchors)\r\n          : prepareRegularAnimation(animationDetails);\r\n    };\r\n\r\n    function filterCssClasses(classes) {\r\n      //remove all the `ng-` stuff\r\n      return classes.replace(/\\bng-\\S+\\b/g, '');\r\n    }\r\n\r\n    function getUniqueValues(a, b) {\r\n      if (isString(a)) a = a.split(' ');\r\n      if (isString(b)) b = b.split(' ');\r\n      return a.filter(function(val) {\r\n        return b.indexOf(val) === -1;\r\n      }).join(' ');\r\n    }\r\n\r\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\r\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\r\n      var startingClasses = filterCssClasses(getClassVal(clone));\r\n\r\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n\r\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\r\n\r\n      rootBodyElement.append(clone);\r\n\r\n      var animatorIn, animatorOut = prepareOutAnimation();\r\n\r\n      // the user may not end up using the `out` animation and\r\n      // only making use of the `in` animation or vice-versa.\r\n      // In either case we should allow this and not assume the\r\n      // animation is over unless both animations are not used.\r\n      if (!animatorOut) {\r\n        animatorIn = prepareInAnimation();\r\n        if (!animatorIn) {\r\n          return end();\r\n        }\r\n      }\r\n\r\n      var startingAnimator = animatorOut || animatorIn;\r\n\r\n      return {\r\n        start: function() {\r\n          var runner;\r\n\r\n          var currentAnimation = startingAnimator.start();\r\n          currentAnimation.done(function() {\r\n            currentAnimation = null;\r\n            if (!animatorIn) {\r\n              animatorIn = prepareInAnimation();\r\n              if (animatorIn) {\r\n                currentAnimation = animatorIn.start();\r\n                currentAnimation.done(function() {\r\n                  currentAnimation = null;\r\n                  end();\r\n                  runner.complete();\r\n                });\r\n                return currentAnimation;\r\n              }\r\n            }\r\n            // in the event that there is no `in` animation\r\n            end();\r\n            runner.complete();\r\n          });\r\n\r\n          runner = new $$AnimateRunner({\r\n            end: endFn,\r\n            cancel: endFn\r\n          });\r\n\r\n          return runner;\r\n\r\n          function endFn() {\r\n            if (currentAnimation) {\r\n              currentAnimation.end();\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      function calculateAnchorStyles(anchor) {\r\n        var styles = {};\r\n\r\n        var coords = getDomNode(anchor).getBoundingClientRect();\r\n\r\n        // we iterate directly since safari messes up and doesn't return\r\n        // all the keys for the coords object when iterated\r\n        forEach(['width','height','top','left'], function(key) {\r\n          var value = coords[key];\r\n          switch (key) {\r\n            case 'top':\r\n              value += bodyNode.scrollTop;\r\n              break;\r\n            case 'left':\r\n              value += bodyNode.scrollLeft;\r\n              break;\r\n          }\r\n          styles[key] = Math.floor(value) + 'px';\r\n        });\r\n        return styles;\r\n      }\r\n\r\n      function prepareOutAnimation() {\r\n        var animator = $animateCss(clone, {\r\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\r\n          delay: true,\r\n          from: calculateAnchorStyles(outAnchor)\r\n        });\r\n\r\n        // read the comment within `prepareRegularAnimation` to understand\r\n        // why this check is necessary\r\n        return animator.$$willAnimate ? animator : null;\r\n      }\r\n\r\n      function getClassVal(element) {\r\n        return element.attr('class') || '';\r\n      }\r\n\r\n      function prepareInAnimation() {\r\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\r\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\r\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\r\n\r\n        var animator = $animateCss(clone, {\r\n          to: calculateAnchorStyles(inAnchor),\r\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\r\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\r\n          delay: true\r\n        });\r\n\r\n        // read the comment within `prepareRegularAnimation` to understand\r\n        // why this check is necessary\r\n        return animator.$$willAnimate ? animator : null;\r\n      }\r\n\r\n      function end() {\r\n        clone.remove();\r\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n      }\r\n    }\r\n\r\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\r\n      var fromAnimation = prepareRegularAnimation(from, noop);\r\n      var toAnimation = prepareRegularAnimation(to, noop);\r\n\r\n      var anchorAnimations = [];\r\n      forEach(anchors, function(anchor) {\r\n        var outElement = anchor['out'];\r\n        var inElement = anchor['in'];\r\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\r\n        if (animator) {\r\n          anchorAnimations.push(animator);\r\n        }\r\n      });\r\n\r\n      // no point in doing anything when there are no elements to animate\r\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\r\n\r\n      return {\r\n        start: function() {\r\n          var animationRunners = [];\r\n\r\n          if (fromAnimation) {\r\n            animationRunners.push(fromAnimation.start());\r\n          }\r\n\r\n          if (toAnimation) {\r\n            animationRunners.push(toAnimation.start());\r\n          }\r\n\r\n          forEach(anchorAnimations, function(animation) {\r\n            animationRunners.push(animation.start());\r\n          });\r\n\r\n          var runner = new $$AnimateRunner({\r\n            end: endFn,\r\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\r\n          });\r\n\r\n          $$AnimateRunner.all(animationRunners, function(status) {\r\n            runner.complete(status);\r\n          });\r\n\r\n          return runner;\r\n\r\n          function endFn() {\r\n            forEach(animationRunners, function(runner) {\r\n              runner.end();\r\n            });\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    function prepareRegularAnimation(animationDetails) {\r\n      var element = animationDetails.element;\r\n      var options = animationDetails.options || {};\r\n\r\n      if (animationDetails.structural) {\r\n        options.event = animationDetails.event;\r\n        options.structural = true;\r\n        options.applyClassesEarly = true;\r\n\r\n        // we special case the leave animation since we want to ensure that\r\n        // the element is removed as soon as the animation is over. Otherwise\r\n        // a flicker might appear or the element may not be removed at all\r\n        if (animationDetails.event === 'leave') {\r\n          options.onDone = options.domOperation;\r\n        }\r\n      }\r\n\r\n      // We assign the preparationClasses as the actual animation event since\r\n      // the internals of $animateCss will just suffix the event token values\r\n      // with `-active` to trigger the animation.\r\n      if (options.preparationClasses) {\r\n        options.event = concatWithSpace(options.event, options.preparationClasses);\r\n      }\r\n\r\n      var animator = $animateCss(element, options);\r\n\r\n      // the driver lookup code inside of $$animation attempts to spawn a\r\n      // driver one by one until a driver returns a.$$willAnimate animator object.\r\n      // $animateCss will always return an object, however, it will pass in\r\n      // a flag as a hint as to whether an animation was detected or not\r\n      return animator.$$willAnimate ? animator : null;\r\n    }\r\n  }];\r\n}];\r\n\r\n// TODO(matsko): use caching here to speed things up for detection\r\n// TODO(matsko): add documentation\r\n//  by the time...\r\n\r\nvar $$AnimateJsProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\r\n       function($injector,   $$AnimateRunner,   $$jqLite) {\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n         // $animateJs(element, 'enter');\r\n    return function(element, event, classes, options) {\r\n      var animationClosed = false;\r\n\r\n      // the `classes` argument is optional and if it is not used\r\n      // then the classes will be resolved from the element's className\r\n      // property as well as options.addClass/options.removeClass.\r\n      if (arguments.length === 3 && isObject(classes)) {\r\n        options = classes;\r\n        classes = null;\r\n      }\r\n\r\n      options = prepareAnimationOptions(options);\r\n      if (!classes) {\r\n        classes = element.attr('class') || '';\r\n        if (options.addClass) {\r\n          classes += ' ' + options.addClass;\r\n        }\r\n        if (options.removeClass) {\r\n          classes += ' ' + options.removeClass;\r\n        }\r\n      }\r\n\r\n      var classesToAdd = options.addClass;\r\n      var classesToRemove = options.removeClass;\r\n\r\n      // the lookupAnimations function returns a series of animation objects that are\r\n      // matched up with one or more of the CSS classes. These animation objects are\r\n      // defined via the module.animation factory function. If nothing is detected then\r\n      // we don't return anything which then makes $animation query the next driver.\r\n      var animations = lookupAnimations(classes);\r\n      var before, after;\r\n      if (animations.length) {\r\n        var afterFn, beforeFn;\r\n        if (event === 'leave') {\r\n          beforeFn = 'leave';\r\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\r\n        } else {\r\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\r\n          afterFn = event;\r\n        }\r\n\r\n        if (event !== 'enter' && event !== 'move') {\r\n          before = packageAnimations(element, event, options, animations, beforeFn);\r\n        }\r\n        after  = packageAnimations(element, event, options, animations, afterFn);\r\n      }\r\n\r\n      // no matching animations\r\n      if (!before && !after) return;\r\n\r\n      function applyOptions() {\r\n        options.domOperation();\r\n        applyAnimationClasses(element, options);\r\n      }\r\n\r\n      function close() {\r\n        animationClosed = true;\r\n        applyOptions();\r\n        applyAnimationStyles(element, options);\r\n      }\r\n\r\n      var runner;\r\n\r\n      return {\r\n        $$willAnimate: true,\r\n        end: function() {\r\n          if (runner) {\r\n            runner.end();\r\n          } else {\r\n            close();\r\n            runner = new $$AnimateRunner();\r\n            runner.complete(true);\r\n          }\r\n          return runner;\r\n        },\r\n        start: function() {\r\n          if (runner) {\r\n            return runner;\r\n          }\r\n\r\n          runner = new $$AnimateRunner();\r\n          var closeActiveAnimations;\r\n          var chain = [];\r\n\r\n          if (before) {\r\n            chain.push(function(fn) {\r\n              closeActiveAnimations = before(fn);\r\n            });\r\n          }\r\n\r\n          if (chain.length) {\r\n            chain.push(function(fn) {\r\n              applyOptions();\r\n              fn(true);\r\n            });\r\n          } else {\r\n            applyOptions();\r\n          }\r\n\r\n          if (after) {\r\n            chain.push(function(fn) {\r\n              closeActiveAnimations = after(fn);\r\n            });\r\n          }\r\n\r\n          runner.setHost({\r\n            end: function() {\r\n              endAnimations();\r\n            },\r\n            cancel: function() {\r\n              endAnimations(true);\r\n            }\r\n          });\r\n\r\n          $$AnimateRunner.chain(chain, onComplete);\r\n          return runner;\r\n\r\n          function onComplete(success) {\r\n            close(success);\r\n            runner.complete(success);\r\n          }\r\n\r\n          function endAnimations(cancelled) {\r\n            if (!animationClosed) {\r\n              (closeActiveAnimations || noop)(cancelled);\r\n              onComplete(cancelled);\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      function executeAnimationFn(fn, element, event, options, onDone) {\r\n        var args;\r\n        switch (event) {\r\n          case 'animate':\r\n            args = [element, options.from, options.to, onDone];\r\n            break;\r\n\r\n          case 'setClass':\r\n            args = [element, classesToAdd, classesToRemove, onDone];\r\n            break;\r\n\r\n          case 'addClass':\r\n            args = [element, classesToAdd, onDone];\r\n            break;\r\n\r\n          case 'removeClass':\r\n            args = [element, classesToRemove, onDone];\r\n            break;\r\n\r\n          default:\r\n            args = [element, onDone];\r\n            break;\r\n        }\r\n\r\n        args.push(options);\r\n\r\n        var value = fn.apply(fn, args);\r\n        if (value) {\r\n          if (isFunction(value.start)) {\r\n            value = value.start();\r\n          }\r\n\r\n          if (value instanceof $$AnimateRunner) {\r\n            value.done(onDone);\r\n          } else if (isFunction(value)) {\r\n            // optional onEnd / onCancel callback\r\n            return value;\r\n          }\r\n        }\r\n\r\n        return noop;\r\n      }\r\n\r\n      function groupEventedAnimations(element, event, options, animations, fnName) {\r\n        var operations = [];\r\n        forEach(animations, function(ani) {\r\n          var animation = ani[fnName];\r\n          if (!animation) return;\r\n\r\n          // note that all of these animations will run in parallel\r\n          operations.push(function() {\r\n            var runner;\r\n            var endProgressCb;\r\n\r\n            var resolved = false;\r\n            var onAnimationComplete = function(rejected) {\r\n              if (!resolved) {\r\n                resolved = true;\r\n                (endProgressCb || noop)(rejected);\r\n                runner.complete(!rejected);\r\n              }\r\n            };\r\n\r\n            runner = new $$AnimateRunner({\r\n              end: function() {\r\n                onAnimationComplete();\r\n              },\r\n              cancel: function() {\r\n                onAnimationComplete(true);\r\n              }\r\n            });\r\n\r\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\r\n              var cancelled = result === false;\r\n              onAnimationComplete(cancelled);\r\n            });\r\n\r\n            return runner;\r\n          });\r\n        });\r\n\r\n        return operations;\r\n      }\r\n\r\n      function packageAnimations(element, event, options, animations, fnName) {\r\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\r\n        if (operations.length === 0) {\r\n          var a, b;\r\n          if (fnName === 'beforeSetClass') {\r\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\r\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\r\n          } else if (fnName === 'setClass') {\r\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\r\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\r\n          }\r\n\r\n          if (a) {\r\n            operations = operations.concat(a);\r\n          }\r\n          if (b) {\r\n            operations = operations.concat(b);\r\n          }\r\n        }\r\n\r\n        if (operations.length === 0) return;\r\n\r\n        // TODO(matsko): add documentation\r\n        return function startAnimation(callback) {\r\n          var runners = [];\r\n          if (operations.length) {\r\n            forEach(operations, function(animateFn) {\r\n              runners.push(animateFn());\r\n            });\r\n          }\r\n\r\n          if (runners.length) {\r\n            $$AnimateRunner.all(runners, callback);\r\n          }  else {\r\n            callback();\r\n          }\r\n\r\n          return function endFn(reject) {\r\n            forEach(runners, function(runner) {\r\n              if (reject) {\r\n                runner.cancel();\r\n              } else {\r\n                runner.end();\r\n              }\r\n            });\r\n          };\r\n        };\r\n      }\r\n    };\r\n\r\n    function lookupAnimations(classes) {\r\n      classes = isArray(classes) ? classes : classes.split(' ');\r\n      var matches = [], flagMap = {};\r\n      for (var i = 0; i < classes.length; i++) {\r\n        var klass = classes[i],\r\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\r\n        if (animationFactory && !flagMap[klass]) {\r\n          matches.push($injector.get(animationFactory));\r\n          flagMap[klass] = true;\r\n        }\r\n      }\r\n      return matches;\r\n    }\r\n  }];\r\n}];\r\n\r\nvar $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\r\n  $$animationProvider.drivers.push('$$animateJsDriver');\r\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\r\n    return function initDriverFn(animationDetails) {\r\n      if (animationDetails.from && animationDetails.to) {\r\n        var fromAnimation = prepareAnimation(animationDetails.from);\r\n        var toAnimation = prepareAnimation(animationDetails.to);\r\n        if (!fromAnimation && !toAnimation) return;\r\n\r\n        return {\r\n          start: function() {\r\n            var animationRunners = [];\r\n\r\n            if (fromAnimation) {\r\n              animationRunners.push(fromAnimation.start());\r\n            }\r\n\r\n            if (toAnimation) {\r\n              animationRunners.push(toAnimation.start());\r\n            }\r\n\r\n            $$AnimateRunner.all(animationRunners, done);\r\n\r\n            var runner = new $$AnimateRunner({\r\n              end: endFnFactory(),\r\n              cancel: endFnFactory()\r\n            });\r\n\r\n            return runner;\r\n\r\n            function endFnFactory() {\r\n              return function() {\r\n                forEach(animationRunners, function(runner) {\r\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\r\n                  runner.end();\r\n                });\r\n              };\r\n            }\r\n\r\n            function done(status) {\r\n              runner.complete(status);\r\n            }\r\n          }\r\n        };\r\n      } else {\r\n        return prepareAnimation(animationDetails);\r\n      }\r\n    };\r\n\r\n    function prepareAnimation(animationDetails) {\r\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\r\n      var element = animationDetails.element;\r\n      var event = animationDetails.event;\r\n      var options = animationDetails.options;\r\n      var classes = animationDetails.classes;\r\n      return $$animateJs(element, event, classes, options);\r\n    }\r\n  }];\r\n}];\r\n\r\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\r\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\r\nvar $$AnimateQueueProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var PRE_DIGEST_STATE = 1;\r\n  var RUNNING_STATE = 2;\r\n  var ONE_SPACE = ' ';\r\n\r\n  var rules = this.rules = {\r\n    skip: [],\r\n    cancel: [],\r\n    join: []\r\n  };\r\n\r\n  function makeTruthyCssClassMap(classString) {\r\n    if (!classString) {\r\n      return null;\r\n    }\r\n\r\n    var keys = classString.split(ONE_SPACE);\r\n    var map = Object.create(null);\r\n\r\n    forEach(keys, function(key) {\r\n      map[key] = true;\r\n    });\r\n    return map;\r\n  }\r\n\r\n  function hasMatchingClasses(newClassString, currentClassString) {\r\n    if (newClassString && currentClassString) {\r\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\r\n      return newClassString.split(ONE_SPACE).some(function(className) {\r\n        return currentClassMap[className];\r\n      });\r\n    }\r\n  }\r\n\r\n  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\r\n    return rules[ruleType].some(function(fn) {\r\n      return fn(element, currentAnimation, previousAnimation);\r\n    });\r\n  }\r\n\r\n  function hasAnimationClasses(animation, and) {\r\n    var a = (animation.addClass || '').length > 0;\r\n    var b = (animation.removeClass || '').length > 0;\r\n    return and ? a && b : a || b;\r\n  }\r\n\r\n  rules.join.push(function(element, newAnimation, currentAnimation) {\r\n    // if the new animation is class-based then we can just tack that on\r\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\r\n  });\r\n\r\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\r\n    // there is no need to animate anything if no classes are being added and\r\n    // there is no structural animation that will be triggered\r\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\r\n  });\r\n\r\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\r\n    // why should we trigger a new structural animation if the element will\r\n    // be removed from the DOM anyway?\r\n    return currentAnimation.event === 'leave' && newAnimation.structural;\r\n  });\r\n\r\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\r\n    // if there is an ongoing current animation then don't even bother running the class-based animation\r\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\r\n    // there can never be two structural animations running at the same time\r\n    return currentAnimation.structural && newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\r\n    // if the previous animation is already running, but the new animation will\r\n    // be triggered, but the new animation is structural\r\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\r\n    // cancel the animation if classes added / removed in both animation cancel each other out,\r\n    // but only if the current animation isn't structural\r\n\r\n    if (currentAnimation.structural) return false;\r\n\r\n    var nA = newAnimation.addClass;\r\n    var nR = newAnimation.removeClass;\r\n    var cA = currentAnimation.addClass;\r\n    var cR = currentAnimation.removeClass;\r\n\r\n    // early detection to save the global CPU shortage :)\r\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\r\n      return false;\r\n    }\r\n\r\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\r\n  });\r\n\r\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',\r\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\r\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,\r\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\r\n\r\n    var activeAnimationsLookup = new $$HashMap();\r\n    var disabledElementsLookup = new $$HashMap();\r\n    var animationsEnabled = null;\r\n\r\n    function postDigestTaskFactory() {\r\n      var postDigestCalled = false;\r\n      return function(fn) {\r\n        // we only issue a call to postDigest before\r\n        // it has first passed. This prevents any callbacks\r\n        // from not firing once the animation has completed\r\n        // since it will be out of the digest cycle.\r\n        if (postDigestCalled) {\r\n          fn();\r\n        } else {\r\n          $rootScope.$$postDigest(function() {\r\n            postDigestCalled = true;\r\n            fn();\r\n          });\r\n        }\r\n      };\r\n    }\r\n\r\n    // Wait until all directive and route-related templates are downloaded and\r\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\r\n    // all of the remote templates being currently downloaded. If there are no\r\n    // templates currently downloading then the watcher will still fire anyway.\r\n    var deregisterWatch = $rootScope.$watch(\r\n      function() { return $templateRequest.totalPendingRequests === 0; },\r\n      function(isEmpty) {\r\n        if (!isEmpty) return;\r\n        deregisterWatch();\r\n\r\n        // Now that all templates have been downloaded, $animate will wait until\r\n        // the post digest queue is empty before enabling animations. By having two\r\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\r\n        // very end of the post digest queue. Since all of the animations in $animate\r\n        // use $postDigest, it's important that the code below executes at the end.\r\n        // This basically means that the page is fully downloaded and compiled before\r\n        // any animations are triggered.\r\n        $rootScope.$$postDigest(function() {\r\n          $rootScope.$$postDigest(function() {\r\n            // we check for null directly in the event that the application already called\r\n            // .enabled() with whatever arguments that it provided it with\r\n            if (animationsEnabled === null) {\r\n              animationsEnabled = true;\r\n            }\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    var callbackRegistry = Object.create(null);\r\n\r\n    // remember that the classNameFilter is set during the provider/config\r\n    // stage therefore we can optimize here and setup a helper function\r\n    var classNameFilter = $animateProvider.classNameFilter();\r\n    var isAnimatableClassName = !classNameFilter\r\n              ? function() { return true; }\r\n              : function(className) {\r\n                return classNameFilter.test(className);\r\n              };\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    function normalizeAnimationDetails(element, animation) {\r\n      return mergeAnimationDetails(element, animation, {});\r\n    }\r\n\r\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\r\n    var contains = window.Node.prototype.contains || /** @this */ function(arg) {\r\n      // eslint-disable-next-line no-bitwise\r\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\r\n    };\r\n\r\n    function findCallbacks(parent, element, event) {\r\n      var targetNode = getDomNode(element);\r\n      var targetParentNode = getDomNode(parent);\r\n\r\n      var matches = [];\r\n      var entries = callbackRegistry[event];\r\n      if (entries) {\r\n        forEach(entries, function(entry) {\r\n          if (contains.call(entry.node, targetNode)) {\r\n            matches.push(entry.callback);\r\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\r\n            matches.push(entry.callback);\r\n          }\r\n        });\r\n      }\r\n\r\n      return matches;\r\n    }\r\n\r\n    function filterFromRegistry(list, matchContainer, matchCallback) {\r\n      var containerNode = extractElementNode(matchContainer);\r\n      return list.filter(function(entry) {\r\n        var isMatch = entry.node === containerNode &&\r\n                        (!matchCallback || entry.callback === matchCallback);\r\n        return !isMatch;\r\n      });\r\n    }\r\n\r\n    function cleanupEventListeners(phase, element) {\r\n      if (phase === 'close' && !element[0].parentNode) {\r\n        // If the element is not attached to a parentNode, it has been removed by\r\n        // the domOperation, and we can safely remove the event callbacks\r\n        $animate.off(element);\r\n      }\r\n    }\r\n\r\n    var $animate = {\r\n      on: function(event, container, callback) {\r\n        var node = extractElementNode(container);\r\n        callbackRegistry[event] = callbackRegistry[event] || [];\r\n        callbackRegistry[event].push({\r\n          node: node,\r\n          callback: callback\r\n        });\r\n\r\n        // Remove the callback when the element is removed from the DOM\r\n        jqLite(container).on('$destroy', function() {\r\n          var animationDetails = activeAnimationsLookup.get(node);\r\n\r\n          if (!animationDetails) {\r\n            // If there's an animation ongoing, the callback calling code will remove\r\n            // the event listeners. If we'd remove here, the callbacks would be removed\r\n            // before the animation ends\r\n            $animate.off(event, container, callback);\r\n          }\r\n        });\r\n      },\r\n\r\n      off: function(event, container, callback) {\r\n        if (arguments.length === 1 && !isString(arguments[0])) {\r\n          container = arguments[0];\r\n          for (var eventType in callbackRegistry) {\r\n            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        var entries = callbackRegistry[event];\r\n        if (!entries) return;\r\n\r\n        callbackRegistry[event] = arguments.length === 1\r\n            ? null\r\n            : filterFromRegistry(entries, container, callback);\r\n      },\r\n\r\n      pin: function(element, parentElement) {\r\n        assertArg(isElement(element), 'element', 'not an element');\r\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\r\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\r\n      },\r\n\r\n      push: function(element, event, options, domOperation) {\r\n        options = options || {};\r\n        options.domOperation = domOperation;\r\n        return queueAnimation(element, event, options);\r\n      },\r\n\r\n      // this method has four signatures:\r\n      //  () - global getter\r\n      //  (bool) - global setter\r\n      //  (element) - element getter\r\n      //  (element, bool) - element setter<F37>\r\n      enabled: function(element, bool) {\r\n        var argCount = arguments.length;\r\n\r\n        if (argCount === 0) {\r\n          // () - Global getter\r\n          bool = !!animationsEnabled;\r\n        } else {\r\n          var hasElement = isElement(element);\r\n\r\n          if (!hasElement) {\r\n            // (bool) - Global setter\r\n            bool = animationsEnabled = !!element;\r\n          } else {\r\n            var node = getDomNode(element);\r\n\r\n            if (argCount === 1) {\r\n              // (element) - Element getter\r\n              bool = !disabledElementsLookup.get(node);\r\n            } else {\r\n              // (element, bool) - Element setter\r\n              disabledElementsLookup.put(node, !bool);\r\n            }\r\n          }\r\n        }\r\n\r\n        return bool;\r\n      }\r\n    };\r\n\r\n    return $animate;\r\n\r\n    function queueAnimation(element, event, initialOptions) {\r\n      // we always make a copy of the options since\r\n      // there should never be any side effects on\r\n      // the input data when running `$animateCss`.\r\n      var options = copy(initialOptions);\r\n\r\n      var node, parent;\r\n      element = stripCommentsFromElement(element);\r\n      if (element) {\r\n        node = getDomNode(element);\r\n        parent = element.parent();\r\n      }\r\n\r\n      options = prepareAnimationOptions(options);\r\n\r\n      // we create a fake runner with a working promise.\r\n      // These methods will become available after the digest has passed\r\n      var runner = new $$AnimateRunner();\r\n\r\n      // this is used to trigger callbacks in postDigest mode\r\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\r\n\r\n      if (isArray(options.addClass)) {\r\n        options.addClass = options.addClass.join(' ');\r\n      }\r\n\r\n      if (options.addClass && !isString(options.addClass)) {\r\n        options.addClass = null;\r\n      }\r\n\r\n      if (isArray(options.removeClass)) {\r\n        options.removeClass = options.removeClass.join(' ');\r\n      }\r\n\r\n      if (options.removeClass && !isString(options.removeClass)) {\r\n        options.removeClass = null;\r\n      }\r\n\r\n      if (options.from && !isObject(options.from)) {\r\n        options.from = null;\r\n      }\r\n\r\n      if (options.to && !isObject(options.to)) {\r\n        options.to = null;\r\n      }\r\n\r\n      // there are situations where a directive issues an animation for\r\n      // a jqLite wrapper that contains only comment nodes... If this\r\n      // happens then there is no way we can perform an animation\r\n      if (!node) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      var className = [node.className, options.addClass, options.removeClass].join(' ');\r\n      if (!isAnimatableClassName(className)) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\r\n\r\n      var documentHidden = $document[0].hidden;\r\n\r\n      // this is a hard disable of all animations for the application or on\r\n      // the element itself, therefore  there is no need to continue further\r\n      // past this point if not enabled\r\n      // Animations are also disabled if the document is currently hidden (page is not visible\r\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\r\n      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);\r\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\r\n      var hasExistingAnimation = !!existingAnimation.state;\r\n\r\n      // there is no point in traversing the same collection of parent ancestors if a followup\r\n      // animation will be run on the same element that already did all that checking work\r\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {\r\n        skipAnimations = !areAnimationsAllowed(element, parent, event);\r\n      }\r\n\r\n      if (skipAnimations) {\r\n        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\r\n        if (documentHidden) notifyProgress(runner, event, 'start');\r\n        close();\r\n        if (documentHidden) notifyProgress(runner, event, 'close');\r\n        return runner;\r\n      }\r\n\r\n      if (isStructural) {\r\n        closeChildAnimations(element);\r\n      }\r\n\r\n      var newAnimation = {\r\n        structural: isStructural,\r\n        element: element,\r\n        event: event,\r\n        addClass: options.addClass,\r\n        removeClass: options.removeClass,\r\n        close: close,\r\n        options: options,\r\n        runner: runner\r\n      };\r\n\r\n      if (hasExistingAnimation) {\r\n        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\r\n        if (skipAnimationFlag) {\r\n          if (existingAnimation.state === RUNNING_STATE) {\r\n            close();\r\n            return runner;\r\n          } else {\r\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n            return existingAnimation.runner;\r\n          }\r\n        }\r\n        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\r\n        if (cancelAnimationFlag) {\r\n          if (existingAnimation.state === RUNNING_STATE) {\r\n            // this will end the animation right away and it is safe\r\n            // to do so since the animation is already running and the\r\n            // runner callback code will run in async\r\n            existingAnimation.runner.end();\r\n          } else if (existingAnimation.structural) {\r\n            // this means that the animation is queued into a digest, but\r\n            // hasn't started yet. Therefore it is safe to run the close\r\n            // method which will call the runner methods in async.\r\n            existingAnimation.close();\r\n          } else {\r\n            // this will merge the new animation options into existing animation options\r\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n\r\n            return existingAnimation.runner;\r\n          }\r\n        } else {\r\n          // a joined animation means that this animation will take over the existing one\r\n          // so an example would involve a leave animation taking over an enter. Then when\r\n          // the postDigest kicks in the enter will be ignored.\r\n          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\r\n          if (joinAnimationFlag) {\r\n            if (existingAnimation.state === RUNNING_STATE) {\r\n              normalizeAnimationDetails(element, newAnimation);\r\n            } else {\r\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\r\n\r\n              event = newAnimation.event = existingAnimation.event;\r\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n\r\n              //we return the same runner since only the option values of this animation will\r\n              //be fed into the `existingAnimation`.\r\n              return existingAnimation.runner;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // normalization in this case means that it removes redundant CSS classes that\r\n        // already exist (addClass) or do not exist (removeClass) on the element\r\n        normalizeAnimationDetails(element, newAnimation);\r\n      }\r\n\r\n      // when the options are merged and cleaned up we may end up not having to do\r\n      // an animation at all, therefore we should check this before issuing a post\r\n      // digest callback. Structural animations will always run no matter what.\r\n      var isValidAnimation = newAnimation.structural;\r\n      if (!isValidAnimation) {\r\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\r\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\r\n                            || hasAnimationClasses(newAnimation);\r\n      }\r\n\r\n      if (!isValidAnimation) {\r\n        close();\r\n        clearElementAnimationState(element);\r\n        return runner;\r\n      }\r\n\r\n      // the counter keeps track of cancelled animations\r\n      var counter = (existingAnimation.counter || 0) + 1;\r\n      newAnimation.counter = counter;\r\n\r\n      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\r\n\r\n      $rootScope.$$postDigest(function() {\r\n        var animationDetails = activeAnimationsLookup.get(node);\r\n        var animationCancelled = !animationDetails;\r\n        animationDetails = animationDetails || {};\r\n\r\n        // if addClass/removeClass is called before something like enter then the\r\n        // registered parent element may not be present. The code below will ensure\r\n        // that a final value for parent element is obtained\r\n        var parentElement = element.parent() || [];\r\n\r\n        // animate/structural/class-based animations all have requirements. Otherwise there\r\n        // is no point in performing an animation. The parent node must also be set.\r\n        var isValidAnimation = parentElement.length > 0\r\n                                && (animationDetails.event === 'animate'\r\n                                    || animationDetails.structural\r\n                                    || hasAnimationClasses(animationDetails));\r\n\r\n        // this means that the previous animation was cancelled\r\n        // even if the follow-up animation is the same event\r\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\r\n          // if another animation did not take over then we need\r\n          // to make sure that the domOperation and options are\r\n          // handled accordingly\r\n          if (animationCancelled) {\r\n            applyAnimationClasses(element, options);\r\n            applyAnimationStyles(element, options);\r\n          }\r\n\r\n          // if the event changed from something like enter to leave then we do\r\n          // it, otherwise if it's the same then the end result will be the same too\r\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\r\n            options.domOperation();\r\n            runner.end();\r\n          }\r\n\r\n          // in the event that the element animation was not cancelled or a follow-up animation\r\n          // isn't allowed to animate from here then we need to clear the state of the element\r\n          // so that any future animations won't read the expired animation data.\r\n          if (!isValidAnimation) {\r\n            clearElementAnimationState(element);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // this combined multiple class to addClass / removeClass into a setClass event\r\n        // so long as a structural event did not take over the animation\r\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\r\n            ? 'setClass'\r\n            : animationDetails.event;\r\n\r\n        markElementAnimationState(element, RUNNING_STATE);\r\n        var realRunner = $$animation(element, event, animationDetails.options);\r\n\r\n        // this will update the runner's flow-control events based on\r\n        // the `realRunner` object.\r\n        runner.setHost(realRunner);\r\n        notifyProgress(runner, event, 'start', {});\r\n\r\n        realRunner.done(function(status) {\r\n          close(!status);\r\n          var animationDetails = activeAnimationsLookup.get(node);\r\n          if (animationDetails && animationDetails.counter === counter) {\r\n            clearElementAnimationState(getDomNode(element));\r\n          }\r\n          notifyProgress(runner, event, 'close', {});\r\n        });\r\n      });\r\n\r\n      return runner;\r\n\r\n      function notifyProgress(runner, event, phase, data) {\r\n        runInNextPostDigestOrNow(function() {\r\n          var callbacks = findCallbacks(parent, element, event);\r\n          if (callbacks.length) {\r\n            // do not optimize this call here to RAF because\r\n            // we don't know how heavy the callback code here will\r\n            // be and if this code is buffered then this can\r\n            // lead to a performance regression.\r\n            $$rAF(function() {\r\n              forEach(callbacks, function(callback) {\r\n                callback(element, phase, data);\r\n              });\r\n              cleanupEventListeners(phase, element);\r\n            });\r\n          } else {\r\n            cleanupEventListeners(phase, element);\r\n          }\r\n        });\r\n        runner.progress(event, phase, data);\r\n      }\r\n\r\n      function close(reject) {\r\n        clearGeneratedClasses(element, options);\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n        options.domOperation();\r\n        runner.complete(!reject);\r\n      }\r\n    }\r\n\r\n    function closeChildAnimations(element) {\r\n      var node = getDomNode(element);\r\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\r\n      forEach(children, function(child) {\r\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);\r\n        var animationDetails = activeAnimationsLookup.get(child);\r\n        if (animationDetails) {\r\n          switch (state) {\r\n            case RUNNING_STATE:\r\n              animationDetails.runner.end();\r\n              /* falls through */\r\n            case PRE_DIGEST_STATE:\r\n              activeAnimationsLookup.remove(child);\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    function clearElementAnimationState(element) {\r\n      var node = getDomNode(element);\r\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\r\n      activeAnimationsLookup.remove(node);\r\n    }\r\n\r\n    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\r\n      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\r\n    }\r\n\r\n    /**\r\n     * This fn returns false if any of the following is true:\r\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\r\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\r\n     * c) the element is not a child of the body\r\n     * d) the element is not a child of the $rootElement\r\n     */\r\n    function areAnimationsAllowed(element, parentElement, event) {\r\n      var bodyElement = jqLite($document[0].body);\r\n      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';\r\n      var rootElementDetected = isMatchingElement(element, $rootElement);\r\n      var parentAnimationDetected = false;\r\n      var animateChildren;\r\n      var elementDisabled = disabledElementsLookup.get(getDomNode(element));\r\n\r\n      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);\r\n      if (parentHost) {\r\n        parentElement = parentHost;\r\n      }\r\n\r\n      parentElement = getDomNode(parentElement);\r\n\r\n      while (parentElement) {\r\n        if (!rootElementDetected) {\r\n          // angular doesn't want to attempt to animate elements outside of the application\r\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\r\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\r\n        }\r\n\r\n        if (parentElement.nodeType !== ELEMENT_NODE) {\r\n          // no point in inspecting the #document element\r\n          break;\r\n        }\r\n\r\n        var details = activeAnimationsLookup.get(parentElement) || {};\r\n        // either an enter, leave or move animation will commence\r\n        // therefore we can't allow any animations to take place\r\n        // but if a parent animation is class-based then that's ok\r\n        if (!parentAnimationDetected) {\r\n          var parentElementDisabled = disabledElementsLookup.get(parentElement);\r\n\r\n          if (parentElementDisabled === true && elementDisabled !== false) {\r\n            // disable animations if the user hasn't explicitly enabled animations on the\r\n            // current element\r\n            elementDisabled = true;\r\n            // element is disabled via parent element, no need to check anything else\r\n            break;\r\n          } else if (parentElementDisabled === false) {\r\n            elementDisabled = false;\r\n          }\r\n          parentAnimationDetected = details.structural;\r\n        }\r\n\r\n        if (isUndefined(animateChildren) || animateChildren === true) {\r\n          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);\r\n          if (isDefined(value)) {\r\n            animateChildren = value;\r\n          }\r\n        }\r\n\r\n        // there is no need to continue traversing at this point\r\n        if (parentAnimationDetected && animateChildren === false) break;\r\n\r\n        if (!bodyElementDetected) {\r\n          // we also need to ensure that the element is or will be a part of the body element\r\n          // otherwise it is pointless to even issue an animation to be rendered\r\n          bodyElementDetected = isMatchingElement(parentElement, bodyElement);\r\n        }\r\n\r\n        if (bodyElementDetected && rootElementDetected) {\r\n          // If both body and root have been found, any other checks are pointless,\r\n          // as no animation data should live outside the application\r\n          break;\r\n        }\r\n\r\n        if (!rootElementDetected) {\r\n          // If no rootElement is detected, check if the parentElement is pinned to another element\r\n          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);\r\n          if (parentHost) {\r\n            // The pin target element becomes the next parent element\r\n            parentElement = getDomNode(parentHost);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        parentElement = parentElement.parentNode;\r\n      }\r\n\r\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\r\n      return allowAnimation && rootElementDetected && bodyElementDetected;\r\n    }\r\n\r\n    function markElementAnimationState(element, state, details) {\r\n      details = details || {};\r\n      details.state = state;\r\n\r\n      var node = getDomNode(element);\r\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\r\n\r\n      var oldValue = activeAnimationsLookup.get(node);\r\n      var newValue = oldValue\r\n          ? extend(oldValue, details)\r\n          : details;\r\n      activeAnimationsLookup.put(node, newValue);\r\n    }\r\n  }];\r\n}];\r\n\r\n/* exported $$AnimationProvider */\r\n\r\nvar $$AnimationProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\r\n\r\n  var drivers = this.drivers = [];\r\n\r\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\r\n\r\n  function setRunner(element, runner) {\r\n    element.data(RUNNER_STORAGE_KEY, runner);\r\n  }\r\n\r\n  function removeRunner(element) {\r\n    element.removeData(RUNNER_STORAGE_KEY);\r\n  }\r\n\r\n  function getRunner(element) {\r\n    return element.data(RUNNER_STORAGE_KEY);\r\n  }\r\n\r\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\r\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\r\n\r\n    var animationQueue = [];\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    function sortAnimations(animations) {\r\n      var tree = { children: [] };\r\n      var i, lookup = new $$HashMap();\r\n\r\n      // this is done first beforehand so that the hashmap\r\n      // is filled with a list of the elements that will be animated\r\n      for (i = 0; i < animations.length; i++) {\r\n        var animation = animations[i];\r\n        lookup.put(animation.domNode, animations[i] = {\r\n          domNode: animation.domNode,\r\n          fn: animation.fn,\r\n          children: []\r\n        });\r\n      }\r\n\r\n      for (i = 0; i < animations.length; i++) {\r\n        processNode(animations[i]);\r\n      }\r\n\r\n      return flatten(tree);\r\n\r\n      function processNode(entry) {\r\n        if (entry.processed) return entry;\r\n        entry.processed = true;\r\n\r\n        var elementNode = entry.domNode;\r\n        var parentNode = elementNode.parentNode;\r\n        lookup.put(elementNode, entry);\r\n\r\n        var parentEntry;\r\n        while (parentNode) {\r\n          parentEntry = lookup.get(parentNode);\r\n          if (parentEntry) {\r\n            if (!parentEntry.processed) {\r\n              parentEntry = processNode(parentEntry);\r\n            }\r\n            break;\r\n          }\r\n          parentNode = parentNode.parentNode;\r\n        }\r\n\r\n        (parentEntry || tree).children.push(entry);\r\n        return entry;\r\n      }\r\n\r\n      function flatten(tree) {\r\n        var result = [];\r\n        var queue = [];\r\n        var i;\r\n\r\n        for (i = 0; i < tree.children.length; i++) {\r\n          queue.push(tree.children[i]);\r\n        }\r\n\r\n        var remainingLevelEntries = queue.length;\r\n        var nextLevelEntries = 0;\r\n        var row = [];\r\n\r\n        for (i = 0; i < queue.length; i++) {\r\n          var entry = queue[i];\r\n          if (remainingLevelEntries <= 0) {\r\n            remainingLevelEntries = nextLevelEntries;\r\n            nextLevelEntries = 0;\r\n            result.push(row);\r\n            row = [];\r\n          }\r\n          row.push(entry.fn);\r\n          entry.children.forEach(function(childEntry) {\r\n            nextLevelEntries++;\r\n            queue.push(childEntry);\r\n          });\r\n          remainingLevelEntries--;\r\n        }\r\n\r\n        if (row.length) {\r\n          result.push(row);\r\n        }\r\n\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // TODO(matsko): document the signature in a better way\r\n    return function(element, event, options) {\r\n      options = prepareAnimationOptions(options);\r\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\r\n\r\n      // there is no animation at the current moment, however\r\n      // these runner methods will get later updated with the\r\n      // methods leading into the driver's end/cancel methods\r\n      // for now they just stop the animation from starting\r\n      var runner = new $$AnimateRunner({\r\n        end: function() { close(); },\r\n        cancel: function() { close(true); }\r\n      });\r\n\r\n      if (!drivers.length) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      setRunner(element, runner);\r\n\r\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\r\n      var tempClasses = options.tempClasses;\r\n      if (tempClasses) {\r\n        classes += ' ' + tempClasses;\r\n        options.tempClasses = null;\r\n      }\r\n\r\n      var prepareClassName;\r\n      if (isStructural) {\r\n        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;\r\n        $$jqLite.addClass(element, prepareClassName);\r\n      }\r\n\r\n      animationQueue.push({\r\n        // this data is used by the postDigest code and passed into\r\n        // the driver step function\r\n        element: element,\r\n        classes: classes,\r\n        event: event,\r\n        structural: isStructural,\r\n        options: options,\r\n        beforeStart: beforeStart,\r\n        close: close\r\n      });\r\n\r\n      element.on('$destroy', handleDestroyedElement);\r\n\r\n      // we only want there to be one function called within the post digest\r\n      // block. This way we can group animations for all the animations that\r\n      // were apart of the same postDigest flush call.\r\n      if (animationQueue.length > 1) return runner;\r\n\r\n      $rootScope.$$postDigest(function() {\r\n        var animations = [];\r\n        forEach(animationQueue, function(entry) {\r\n          // the element was destroyed early on which removed the runner\r\n          // form its storage. This means we can't animate this element\r\n          // at all and it already has been closed due to destruction.\r\n          if (getRunner(entry.element)) {\r\n            animations.push(entry);\r\n          } else {\r\n            entry.close();\r\n          }\r\n        });\r\n\r\n        // now any future animations will be in another postDigest\r\n        animationQueue.length = 0;\r\n\r\n        var groupedAnimations = groupAnimations(animations);\r\n        var toBeSortedAnimations = [];\r\n\r\n        forEach(groupedAnimations, function(animationEntry) {\r\n          toBeSortedAnimations.push({\r\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\r\n            fn: function triggerAnimationStart() {\r\n              // it's important that we apply the `ng-animate` CSS class and the\r\n              // temporary classes before we do any driver invoking since these\r\n              // CSS classes may be required for proper CSS detection.\r\n              animationEntry.beforeStart();\r\n\r\n              var startAnimationFn, closeFn = animationEntry.close;\r\n\r\n              // in the event that the element was removed before the digest runs or\r\n              // during the RAF sequencing then we should not trigger the animation.\r\n              var targetElement = animationEntry.anchors\r\n                  ? (animationEntry.from.element || animationEntry.to.element)\r\n                  : animationEntry.element;\r\n\r\n              if (getRunner(targetElement)) {\r\n                var operation = invokeFirstDriver(animationEntry);\r\n                if (operation) {\r\n                  startAnimationFn = operation.start;\r\n                }\r\n              }\r\n\r\n              if (!startAnimationFn) {\r\n                closeFn();\r\n              } else {\r\n                var animationRunner = startAnimationFn();\r\n                animationRunner.done(function(status) {\r\n                  closeFn(!status);\r\n                });\r\n                updateAnimationRunners(animationEntry, animationRunner);\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        // we need to sort each of the animations in order of parent to child\r\n        // relationships. This ensures that the child classes are applied at the\r\n        // right time.\r\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\r\n      });\r\n\r\n      return runner;\r\n\r\n      // TODO(matsko): change to reference nodes\r\n      function getAnchorNodes(node) {\r\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\r\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\r\n              ? [node]\r\n              : node.querySelectorAll(SELECTOR);\r\n        var anchors = [];\r\n        forEach(items, function(node) {\r\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\r\n          if (attr && attr.length) {\r\n            anchors.push(node);\r\n          }\r\n        });\r\n        return anchors;\r\n      }\r\n\r\n      function groupAnimations(animations) {\r\n        var preparedAnimations = [];\r\n        var refLookup = {};\r\n        forEach(animations, function(animation, index) {\r\n          var element = animation.element;\r\n          var node = getDomNode(element);\r\n          var event = animation.event;\r\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\r\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\r\n\r\n          if (anchorNodes.length) {\r\n            var direction = enterOrMove ? 'to' : 'from';\r\n\r\n            forEach(anchorNodes, function(anchor) {\r\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\r\n              refLookup[key] = refLookup[key] || {};\r\n              refLookup[key][direction] = {\r\n                animationID: index,\r\n                element: jqLite(anchor)\r\n              };\r\n            });\r\n          } else {\r\n            preparedAnimations.push(animation);\r\n          }\r\n        });\r\n\r\n        var usedIndicesLookup = {};\r\n        var anchorGroups = {};\r\n        forEach(refLookup, function(operations, key) {\r\n          var from = operations.from;\r\n          var to = operations.to;\r\n\r\n          if (!from || !to) {\r\n            // only one of these is set therefore we can't have an\r\n            // anchor animation since all three pieces are required\r\n            var index = from ? from.animationID : to.animationID;\r\n            var indexKey = index.toString();\r\n            if (!usedIndicesLookup[indexKey]) {\r\n              usedIndicesLookup[indexKey] = true;\r\n              preparedAnimations.push(animations[index]);\r\n            }\r\n            return;\r\n          }\r\n\r\n          var fromAnimation = animations[from.animationID];\r\n          var toAnimation = animations[to.animationID];\r\n          var lookupKey = from.animationID.toString();\r\n          if (!anchorGroups[lookupKey]) {\r\n            var group = anchorGroups[lookupKey] = {\r\n              structural: true,\r\n              beforeStart: function() {\r\n                fromAnimation.beforeStart();\r\n                toAnimation.beforeStart();\r\n              },\r\n              close: function() {\r\n                fromAnimation.close();\r\n                toAnimation.close();\r\n              },\r\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\r\n              from: fromAnimation,\r\n              to: toAnimation,\r\n              anchors: [] // TODO(matsko): change to reference nodes\r\n            };\r\n\r\n            // the anchor animations require that the from and to elements both have at least\r\n            // one shared CSS class which effectively marries the two elements together to use\r\n            // the same animation driver and to properly sequence the anchor animation.\r\n            if (group.classes.length) {\r\n              preparedAnimations.push(group);\r\n            } else {\r\n              preparedAnimations.push(fromAnimation);\r\n              preparedAnimations.push(toAnimation);\r\n            }\r\n          }\r\n\r\n          anchorGroups[lookupKey].anchors.push({\r\n            'out': from.element, 'in': to.element\r\n          });\r\n        });\r\n\r\n        return preparedAnimations;\r\n      }\r\n\r\n      function cssClassesIntersection(a,b) {\r\n        a = a.split(' ');\r\n        b = b.split(' ');\r\n        var matches = [];\r\n\r\n        for (var i = 0; i < a.length; i++) {\r\n          var aa = a[i];\r\n          if (aa.substring(0,3) === 'ng-') continue;\r\n\r\n          for (var j = 0; j < b.length; j++) {\r\n            if (aa === b[j]) {\r\n              matches.push(aa);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return matches.join(' ');\r\n      }\r\n\r\n      function invokeFirstDriver(animationDetails) {\r\n        // we loop in reverse order since the more general drivers (like CSS and JS)\r\n        // may attempt more elements, but custom drivers are more particular\r\n        for (var i = drivers.length - 1; i >= 0; i--) {\r\n          var driverName = drivers[i];\r\n          var factory = $injector.get(driverName);\r\n          var driver = factory(animationDetails);\r\n          if (driver) {\r\n            return driver;\r\n          }\r\n        }\r\n      }\r\n\r\n      function beforeStart() {\r\n        element.addClass(NG_ANIMATE_CLASSNAME);\r\n        if (tempClasses) {\r\n          $$jqLite.addClass(element, tempClasses);\r\n        }\r\n        if (prepareClassName) {\r\n          $$jqLite.removeClass(element, prepareClassName);\r\n          prepareClassName = null;\r\n        }\r\n      }\r\n\r\n      function updateAnimationRunners(animation, newRunner) {\r\n        if (animation.from && animation.to) {\r\n          update(animation.from.element);\r\n          update(animation.to.element);\r\n        } else {\r\n          update(animation.element);\r\n        }\r\n\r\n        function update(element) {\r\n          var runner = getRunner(element);\r\n          if (runner) runner.setHost(newRunner);\r\n        }\r\n      }\r\n\r\n      function handleDestroyedElement() {\r\n        var runner = getRunner(element);\r\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\r\n          runner.end();\r\n        }\r\n      }\r\n\r\n      function close(rejected) {\r\n        element.off('$destroy', handleDestroyedElement);\r\n        removeRunner(element);\r\n\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n        options.domOperation();\r\n\r\n        if (tempClasses) {\r\n          $$jqLite.removeClass(element, tempClasses);\r\n        }\r\n\r\n        element.removeClass(NG_ANIMATE_CLASSNAME);\r\n        runner.complete(!rejected);\r\n      }\r\n    };\r\n  }];\r\n}];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngAnimateSwap\r\n * @restrict A\r\n * @scope\r\n *\r\n * @description\r\n *\r\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\r\n * be removed and entered in whenever the associated expression changes. A\r\n * common usecase for this directive is a rotating banner or slider component which\r\n * contains one image being present at a time. When the active image changes\r\n * then the old image will perform a `leave` animation and the new element\r\n * will be inserted via an `enter` animation.\r\n *\r\n * @animations\r\n * | Animation                        | Occurs                               |\r\n * |----------------------------------|--------------------------------------|\r\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |\r\n * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |\r\n *\r\n * @example\r\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\r\n *          deps=\"angular-animate.js\"\r\n *          animations=\"true\" fixBase=\"true\">\r\n *   <file name=\"index.html\">\r\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\r\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\r\n *         {{ number }}\r\n *       </div>\r\n *     </div>\r\n *   </file>\r\n *   <file name=\"script.js\">\r\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\r\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\r\n *         $scope.number = 0;\r\n *         $interval(function() {\r\n *           $scope.number++;\r\n *         }, 1000);\r\n *\r\n *         var colors = ['red','blue','green','yellow','orange'];\r\n *         $scope.colorClass = function(number) {\r\n *           return colors[number % colors.length];\r\n *         };\r\n *       }]);\r\n *   </file>\r\n *  <file name=\"animations.css\">\r\n *  .container {\r\n *    height:250px;\r\n *    width:250px;\r\n *    position:relative;\r\n *    overflow:hidden;\r\n *    border:2px solid black;\r\n *  }\r\n *  .container .cell {\r\n *    font-size:150px;\r\n *    text-align:center;\r\n *    line-height:250px;\r\n *    position:absolute;\r\n *    top:0;\r\n *    left:0;\r\n *    right:0;\r\n *    border-bottom:2px solid black;\r\n *  }\r\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\r\n *    transition:0.5s linear all;\r\n *  }\r\n *  .swap-animation.ng-enter {\r\n *    top:-250px;\r\n *  }\r\n *  .swap-animation.ng-enter-active {\r\n *    top:0px;\r\n *  }\r\n *  .swap-animation.ng-leave {\r\n *    top:0px;\r\n *  }\r\n *  .swap-animation.ng-leave-active {\r\n *    top:250px;\r\n *  }\r\n *  .red { background:red; }\r\n *  .green { background:green; }\r\n *  .blue { background:blue; }\r\n *  .yellow { background:yellow; }\r\n *  .orange { background:orange; }\r\n *  </file>\r\n * </example>\r\n */\r\nvar ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {\r\n  return {\r\n    restrict: 'A',\r\n    transclude: 'element',\r\n    terminal: true,\r\n    priority: 600, // we use 600 here to ensure that the directive is caught before others\r\n    link: function(scope, $element, attrs, ctrl, $transclude) {\r\n      var previousElement, previousScope;\r\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\r\n        if (previousElement) {\r\n          $animate.leave(previousElement);\r\n        }\r\n        if (previousScope) {\r\n          previousScope.$destroy();\r\n          previousScope = null;\r\n        }\r\n        if (value || value === 0) {\r\n          previousScope = scope.$new();\r\n          $transclude(previousScope, function(element) {\r\n            previousElement = element;\r\n            $animate.enter(element, null, $element);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n}];\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngAnimate\r\n * @description\r\n *\r\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\r\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\r\n *\r\n * <div doc-module-components=\"ngAnimate\"></div>\r\n *\r\n * # Usage\r\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\r\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\r\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\r\n * the HTML element that the animation will be triggered on.\r\n *\r\n * ## Directive Support\r\n * The following directives are \"animation aware\":\r\n *\r\n * | Directive                                                                                                | Supported Animations                                                     |\r\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\r\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\r\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\r\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\r\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\r\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\r\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\r\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\r\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\r\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\r\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\r\n *\r\n * (More information can be found by visiting each the documentation associated with each directive.)\r\n *\r\n * ## CSS-based Animations\r\n *\r\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\r\n * and CSS code we can create an animation that will be picked up by Angular when an underlying directive performs an operation.\r\n *\r\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\r\n *\r\n * ```html\r\n * <div ng-if=\"bool\" class=\"fade\">\r\n *    Fade me in out\r\n * </div>\r\n * <button ng-click=\"bool=true\">Fade In!</button>\r\n * <button ng-click=\"bool=false\">Fade Out!</button>\r\n * ```\r\n *\r\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\r\n *\r\n * ```css\r\n * /&#42; The starting CSS styles for the enter animation &#42;/\r\n * .fade.ng-enter {\r\n *   transition:0.5s linear all;\r\n *   opacity:0;\r\n * }\r\n *\r\n * /&#42; The finishing CSS styles for the enter animation &#42;/\r\n * .fade.ng-enter.ng-enter-active {\r\n *   opacity:1;\r\n * }\r\n * ```\r\n *\r\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\r\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\r\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\r\n *\r\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\r\n *\r\n * ```css\r\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\r\n * .fade.ng-leave {\r\n *   transition:0.5s linear all;\r\n *   opacity:1;\r\n * }\r\n * .fade.ng-leave.ng-leave-active {\r\n *   opacity:0;\r\n * }\r\n * ```\r\n *\r\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\r\n *\r\n * ```css\r\n * /&#42; there is no need to define anything inside of the destination\r\n * CSS class since the keyframe will take charge of the animation &#42;/\r\n * .fade.ng-leave {\r\n *   animation: my_fade_animation 0.5s linear;\r\n *   -webkit-animation: my_fade_animation 0.5s linear;\r\n * }\r\n *\r\n * @keyframes my_fade_animation {\r\n *   from { opacity:1; }\r\n *   to { opacity:0; }\r\n * }\r\n *\r\n * @-webkit-keyframes my_fade_animation {\r\n *   from { opacity:1; }\r\n *   to { opacity:0; }\r\n * }\r\n * ```\r\n *\r\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\r\n *\r\n * ### CSS Class-based Animations\r\n *\r\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\r\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\r\n * and removed.\r\n *\r\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\r\n *\r\n * ```html\r\n * <div ng-show=\"bool\" class=\"fade\">\r\n *   Show and hide me\r\n * </div>\r\n * <button ng-click=\"bool=!bool\">Toggle</button>\r\n *\r\n * <style>\r\n * .fade.ng-hide {\r\n *   transition:0.5s linear all;\r\n *   opacity:0;\r\n * }\r\n * </style>\r\n * ```\r\n *\r\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\r\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\r\n *\r\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\r\n * with CSS styles.\r\n *\r\n * ```html\r\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\r\n *   Highlight this box\r\n * </div>\r\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\r\n *\r\n * <style>\r\n * .highlight {\r\n *   transition:0.5s linear all;\r\n * }\r\n * .highlight.on-add {\r\n *   background:white;\r\n * }\r\n * .highlight.on {\r\n *   background:yellow;\r\n * }\r\n * .highlight.on-remove {\r\n *   background:black;\r\n * }\r\n * </style>\r\n * ```\r\n *\r\n * We can also make use of CSS keyframes by placing them within the CSS classes.\r\n *\r\n *\r\n * ### CSS Staggering Animations\r\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\r\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\r\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\r\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\r\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\r\n *\r\n * ```css\r\n * .my-animation.ng-enter {\r\n *   /&#42; standard transition code &#42;/\r\n *   transition: 1s linear all;\r\n *   opacity:0;\r\n * }\r\n * .my-animation.ng-enter-stagger {\r\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\r\n *   transition-delay: 0.1s;\r\n *\r\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\r\n *     to not accidentally inherit a delay property from another CSS class &#42;/\r\n *   transition-duration: 0s;\r\n * }\r\n * .my-animation.ng-enter.ng-enter-active {\r\n *   /&#42; standard transition styles &#42;/\r\n *   opacity:1;\r\n * }\r\n * ```\r\n *\r\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\r\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\r\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\r\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\r\n *\r\n * The following code will issue the **ng-leave-stagger** event on the element provided:\r\n *\r\n * ```js\r\n * var kids = parent.children();\r\n *\r\n * $animate.leave(kids[0]); //stagger index=0\r\n * $animate.leave(kids[1]); //stagger index=1\r\n * $animate.leave(kids[2]); //stagger index=2\r\n * $animate.leave(kids[3]); //stagger index=3\r\n * $animate.leave(kids[4]); //stagger index=4\r\n *\r\n * window.requestAnimationFrame(function() {\r\n *   //stagger has reset itself\r\n *   $animate.leave(kids[5]); //stagger index=0\r\n *   $animate.leave(kids[6]); //stagger index=1\r\n *\r\n *   $scope.$digest();\r\n * });\r\n * ```\r\n *\r\n * Stagger animations are currently only supported within CSS-defined animations.\r\n *\r\n * ### The `ng-animate` CSS class\r\n *\r\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\r\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\r\n *\r\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\r\n *\r\n * ```css\r\n * .zipper.ng-animate {\r\n *   transition:0.5s linear all;\r\n * }\r\n * .zipper.ng-enter {\r\n *   opacity:0;\r\n * }\r\n * .zipper.ng-enter.ng-enter-active {\r\n *   opacity:1;\r\n * }\r\n * .zipper.ng-leave {\r\n *   opacity:1;\r\n * }\r\n * .zipper.ng-leave.ng-leave-active {\r\n *   opacity:0;\r\n * }\r\n * ```\r\n *\r\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\r\n * the CSS class once an animation has completed.)\r\n *\r\n *\r\n * ### The `ng-[event]-prepare` class\r\n *\r\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\r\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\r\n * before the actual animation starts (after waiting for a $digest).\r\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\r\n *\r\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\r\n * into elements that have class-based animations such as `ngClass`.\r\n *\r\n * ```html\r\n * <div ng-class=\"{red: myProp}\">\r\n *   <div ng-class=\"{blue: myProp}\">\r\n *     <div class=\"message\" ng-if=\"myProp\"></div>\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\r\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\r\n *\r\n * ```css\r\n * .message.ng-enter-prepare {\r\n *   opacity: 0;\r\n * }\r\n *\r\n * ```\r\n *\r\n * ## JavaScript-based Animations\r\n *\r\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\r\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\r\n * `module.animation()` module function we can register the animation.\r\n *\r\n * Let's see an example of a enter/leave animation using `ngRepeat`:\r\n *\r\n * ```html\r\n * <div ng-repeat=\"item in items\" class=\"slide\">\r\n *   {{ item }}\r\n * </div>\r\n * ```\r\n *\r\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', [function() {\r\n *   return {\r\n *     // make note that other events (like addClass/removeClass)\r\n *     // have different function input parameters\r\n *     enter: function(element, doneFn) {\r\n *       jQuery(element).fadeIn(1000, doneFn);\r\n *\r\n *       // remember to call doneFn so that angular\r\n *       // knows that the animation has concluded\r\n *     },\r\n *\r\n *     move: function(element, doneFn) {\r\n *       jQuery(element).fadeIn(1000, doneFn);\r\n *     },\r\n *\r\n *     leave: function(element, doneFn) {\r\n *       jQuery(element).fadeOut(1000, doneFn);\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\r\n * greensock.js and velocity.js.\r\n *\r\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\r\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\r\n *\r\n * ```html\r\n * <div ng-class=\"color\" class=\"colorful\">\r\n *   this box is moody\r\n * </div>\r\n * <button ng-click=\"color='red'\">Change to red</button>\r\n * <button ng-click=\"color='blue'\">Change to blue</button>\r\n * <button ng-click=\"color='green'\">Change to green</button>\r\n * ```\r\n *\r\n * ```js\r\n * myModule.animation('.colorful', [function() {\r\n *   return {\r\n *     addClass: function(element, className, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     },\r\n *     removeClass: function(element, className, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     },\r\n *     setClass: function(element, addedClass, removedClass, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ## CSS + JS Animations Together\r\n *\r\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\r\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\r\n * charge of the animation**:\r\n *\r\n * ```html\r\n * <div ng-if=\"bool\" class=\"slide\">\r\n *   Slide in and out\r\n * </div>\r\n * ```\r\n *\r\n * ```js\r\n * myModule.animation('.slide', [function() {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       jQuery(element).slideIn(1000, doneFn);\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ```css\r\n * .slide.ng-enter {\r\n *   transition:0.5s linear all;\r\n *   transform:translateY(-100px);\r\n * }\r\n * .slide.ng-enter.ng-enter-active {\r\n *   transform:translateY(0);\r\n * }\r\n * ```\r\n *\r\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\r\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\r\n * our own JS-based animation code:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element) {\r\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\r\n *       return $animateCss(element, {\r\n *         event: 'enter',\r\n *         structural: true\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\r\n *\r\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\r\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\r\n * data into `$animateCss` directly:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element) {\r\n *       return $animateCss(element, {\r\n *         event: 'enter',\r\n *         structural: true,\r\n *         addClass: 'maroon-setting',\r\n *         from: { height:0 },\r\n *         to: { height: 200 }\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * Now we can fill in the rest via our transition CSS code:\r\n *\r\n * ```css\r\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\r\n * .slide.ng-enter { transition:0.5s linear all; }\r\n *\r\n * /&#42; this extra CSS class will be absorbed into the transition\r\n * since the $animateCss code is adding the class &#42;/\r\n * .maroon-setting { background:red; }\r\n * ```\r\n *\r\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\r\n *\r\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\r\n *\r\n * ## Animation Anchoring (via `ng-animate-ref`)\r\n *\r\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\r\n * structural areas of an application (like views) by pairing up elements using an attribute\r\n * called `ng-animate-ref`.\r\n *\r\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\r\n * that there is a relationship between two components situated in within these views. By using the\r\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\r\n * can then attach an animation, which is triggered when the view changes.\r\n *\r\n * Say for example we have the following template code:\r\n *\r\n * ```html\r\n * <!-- index.html -->\r\n * <div ng-view class=\"view-animation\">\r\n * </div>\r\n *\r\n * <!-- home.html -->\r\n * <a href=\"#/banner-page\">\r\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\r\n * </a>\r\n *\r\n * <!-- banner-page.html -->\r\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\r\n * ```\r\n *\r\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\r\n * HTML contents to see if there is a match reference between any components in the view\r\n * that is leaving and the view that is entering. It will scan both the view which is being\r\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\r\n * contain a matching ref value.\r\n *\r\n * The two images match since they share the same ref value. ngAnimate will now create a\r\n * transport element (which is a clone of the first image element) and it will then attempt\r\n * to animate to the position of the second image element in the next view. For the animation to\r\n * work a special CSS class called `ng-anchor` will be added to the transported element.\r\n *\r\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\r\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\r\n * any changes of CSS classes between the elements:\r\n *\r\n * ```css\r\n * .banner.ng-anchor {\r\n *   /&#42; this animation will last for 1 second since there are\r\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\r\n *   transition:0.5s linear all;\r\n * }\r\n * ```\r\n *\r\n * We also **must** include animations for the views that are being entered and removed\r\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\r\n *\r\n * ```css\r\n * .view-animation.ng-enter, .view-animation.ng-leave {\r\n *   transition:0.5s linear all;\r\n *   position:fixed;\r\n *   left:0;\r\n *   top:0;\r\n *   width:100%;\r\n * }\r\n * .view-animation.ng-enter {\r\n *   transform:translateX(100%);\r\n * }\r\n * .view-animation.ng-leave,\r\n * .view-animation.ng-enter.ng-enter-active {\r\n *   transform:translateX(0%);\r\n * }\r\n * .view-animation.ng-leave.ng-leave-active {\r\n *   transform:translateX(-100%);\r\n * }\r\n * ```\r\n *\r\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\r\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\r\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\r\n * element to its destination. The reason why there are two animations is to give enough time\r\n * for the enter animation on the new element to be ready.\r\n *\r\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\r\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\r\n *\r\n * ```css\r\n * .banner.ng-anchor-out {\r\n *   transition: 0.5s linear all;\r\n *\r\n *   /&#42; the scale will be applied during the out animation,\r\n *          but will be animated away when the in animation runs &#42;/\r\n *   transform: scale(1.2);\r\n * }\r\n *\r\n * .banner.ng-anchor-in {\r\n *   transition: 1s linear all;\r\n * }\r\n * ```\r\n *\r\n *\r\n *\r\n *\r\n * ### Anchoring Demo\r\n *\r\n  <example module=\"anchoringExample\"\r\n           name=\"anchoringExample\"\r\n           id=\"anchoringExample\"\r\n           deps=\"angular-animate.js;angular-route.js\"\r\n           animations=\"true\">\r\n    <file name=\"index.html\">\r\n      <a href=\"#/\">Home</a>\r\n      <hr />\r\n      <div class=\"view-container\">\r\n        <div ng-view class=\"view\"></div>\r\n      </div>\r\n    </file>\r\n    <file name=\"script.js\">\r\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\r\n        .config(['$routeProvider', function($routeProvider) {\r\n          $routeProvider.when('/', {\r\n            templateUrl: 'home.html',\r\n            controller: 'HomeController as home'\r\n          });\r\n          $routeProvider.when('/profile/:id', {\r\n            templateUrl: 'profile.html',\r\n            controller: 'ProfileController as profile'\r\n          });\r\n        }])\r\n        .run(['$rootScope', function($rootScope) {\r\n          $rootScope.records = [\r\n            { id: 1, title: 'Miss Beulah Roob' },\r\n            { id: 2, title: 'Trent Morissette' },\r\n            { id: 3, title: 'Miss Ava Pouros' },\r\n            { id: 4, title: 'Rod Pouros' },\r\n            { id: 5, title: 'Abdul Rice' },\r\n            { id: 6, title: 'Laurie Rutherford Sr.' },\r\n            { id: 7, title: 'Nakia McLaughlin' },\r\n            { id: 8, title: 'Jordon Blanda DVM' },\r\n            { id: 9, title: 'Rhoda Hand' },\r\n            { id: 10, title: 'Alexandrea Sauer' }\r\n          ];\r\n        }])\r\n        .controller('HomeController', [function() {\r\n          //empty\r\n        }])\r\n        .controller('ProfileController', ['$rootScope', '$routeParams',\r\n            function ProfileController($rootScope, $routeParams) {\r\n          var index = parseInt($routeParams.id, 10);\r\n          var record = $rootScope.records[index - 1];\r\n\r\n          this.title = record.title;\r\n          this.id = record.id;\r\n        }]);\r\n    </file>\r\n    <file name=\"home.html\">\r\n      <h2>Welcome to the home page</h1>\r\n      <p>Please click on an element</p>\r\n      <a class=\"record\"\r\n         ng-href=\"#/profile/{{ record.id }}\"\r\n         ng-animate-ref=\"{{ record.id }}\"\r\n         ng-repeat=\"record in records\">\r\n        {{ record.title }}\r\n      </a>\r\n    </file>\r\n    <file name=\"profile.html\">\r\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\r\n        {{ profile.title }}\r\n      </div>\r\n    </file>\r\n    <file name=\"animations.css\">\r\n      .record {\r\n        display:block;\r\n        font-size:20px;\r\n      }\r\n      .profile {\r\n        background:black;\r\n        color:white;\r\n        font-size:100px;\r\n      }\r\n      .view-container {\r\n        position:relative;\r\n      }\r\n      .view-container > .view.ng-animate {\r\n        position:absolute;\r\n        top:0;\r\n        left:0;\r\n        width:100%;\r\n        min-height:500px;\r\n      }\r\n      .view.ng-enter, .view.ng-leave,\r\n      .record.ng-anchor {\r\n        transition:0.5s linear all;\r\n      }\r\n      .view.ng-enter {\r\n        transform:translateX(100%);\r\n      }\r\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\r\n        transform:translateX(0%);\r\n      }\r\n      .view.ng-leave.ng-leave-active {\r\n        transform:translateX(-100%);\r\n      }\r\n      .record.ng-anchor-out {\r\n        background:red;\r\n      }\r\n    </file>\r\n  </example>\r\n *\r\n * ### How is the element transported?\r\n *\r\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\r\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\r\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\r\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\r\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\r\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\r\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\r\n * will become visible since the shim class will be removed.\r\n *\r\n * ### How is the morphing handled?\r\n *\r\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\r\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\r\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\r\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\r\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\r\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\r\n * the cloned element is placed inside of root element which is likely close to the body element).\r\n *\r\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\r\n *\r\n *\r\n * ## Using $animate in your directive code\r\n *\r\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\r\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\r\n * imagine we have a greeting box that shows and hides itself when the data changes\r\n *\r\n * ```html\r\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\r\n * ```\r\n *\r\n * ```js\r\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\r\n *   return function(scope, element, attrs) {\r\n *     attrs.$observe('active', function(value) {\r\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\r\n *     });\r\n *   });\r\n * }]);\r\n * ```\r\n *\r\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\r\n * in our HTML code then we can trigger a CSS or JS animation to happen.\r\n *\r\n * ```css\r\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\r\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\r\n * ```\r\n *\r\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\r\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\r\n *\r\n *\r\n * ## Callbacks and Promises\r\n *\r\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\r\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\r\n * ended by chaining onto the returned promise that animation method returns.\r\n *\r\n * ```js\r\n * // somewhere within the depths of the directive\r\n * $animate.enter(element, parent).then(function() {\r\n *   //the animation has completed\r\n * });\r\n * ```\r\n *\r\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\r\n * anymore.)\r\n *\r\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\r\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\r\n * routing controller to hook into that:\r\n *\r\n * ```js\r\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\r\n *   $animate.on('enter', ngViewElement, function(element) {\r\n *     // the animation for this route has completed\r\n *   }]);\r\n * }])\r\n * ```\r\n *\r\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\r\n */\r\n\r\nvar copy;\r\nvar extend;\r\nvar forEach;\r\nvar isArray;\r\nvar isDefined;\r\nvar isElement;\r\nvar isFunction;\r\nvar isObject;\r\nvar isString;\r\nvar isUndefined;\r\nvar jqLite;\r\nvar noop;\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $animate\r\n * @kind object\r\n *\r\n * @description\r\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\r\n *\r\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\r\n */\r\nangular.module('ngAnimate', [], function initAngularHelpers() {\r\n  // Access helpers from angular core.\r\n  // Do it inside a `config` block to ensure `window.angular` is available.\r\n  noop        = angular.noop;\r\n  copy        = angular.copy;\r\n  extend      = angular.extend;\r\n  jqLite      = angular.element;\r\n  forEach     = angular.forEach;\r\n  isArray     = angular.isArray;\r\n  isString    = angular.isString;\r\n  isObject    = angular.isObject;\r\n  isUndefined = angular.isUndefined;\r\n  isDefined   = angular.isDefined;\r\n  isFunction  = angular.isFunction;\r\n  isElement   = angular.isElement;\r\n})\r\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\r\n\r\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\r\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\r\n\r\n  .provider('$$animateQueue', $$AnimateQueueProvider)\r\n  .provider('$$animation', $$AnimationProvider)\r\n\r\n  .provider('$animateCss', $AnimateCssProvider)\r\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\r\n\r\n  .provider('$$animateJs', $$AnimateJsProvider)\r\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\r\n\r\n\r\n})(window, window.angular);\r\n"]}